inv.insert.clause.dataload.stage=INSERT INTO inv_batch_item (correlation_id,isValid,error_message,entity_type,sent_to_target, siteCode, itemCode, freightMethod, creationDate, firstStockedDate, lastStockCountDate,lastIssueDate, lastReceiptDate, unitOfIssue, stockOnHand,  stockReserved, defaultCostPrice, defaultSellingPrice,  itemsInUse, itemMeanTimeBetweenFailure, supplierCode,  sourceSite, fromSupplierFlag, stockingIndicator, issueMultipleUnits, minimumSafetyStockUnits, useMaximumStockFlag, \
   hostSystemLeadTimeDays, useMaximumOrderQuantityFlag, minimumOrderQuantity,  maximumOrderQuantity, orderMultiple, unitofMeasure, maximumStockUnits) values (:correlationId,:isValid,:errorMessage,'sup_inventory',0,:siteCode, :itemCode, :freightMethod, :creationDate, :firstStockedDate, :lastStockCountDate,:lastIssueDate, :lastReceiptDate, :unitOfIssue, :stockOnHand,  :stockReserved, :defaultCostPrice, :defaultSellingPrice,  :itemsInUse, :itemMeanTimeBetweenFailure, :supplierCode,  :sourceSite, :fromSupplierFlag, :stockingIndicator, :issueMultipleUnits, :minimumSafetyStockUnits, :useMaximumStockFlag, \
  :hostSystemLeadTimeDays, :useMaximumOrderQuantityFlag, :minimumOrderQuantity,  :maximumOrderQuantity, :orderMultiple, :unitofMeasure, :maximumStockUnits)

############################## @@ COMMON QUERIES @@ #######################################
insert.clause.dataload.stage=INSERT INTO batch_item (correlation_id,item_xml_data,isValid,error_message,entity_type,sent_to_target) values (:correlationId,:itemXMLData,:isValid,:errorMessage,:entityType,0)
update.clause.process.stage=UPDATE batch_item SET sent_to_target =:sentToTarget where id =:id

inv.update.clause.process.stage=UPDATE inv_batch_item SET sent_to_target =1 where id =:id
############################ Used in create file job ######################################
select.clause.create.file=select *
from.clause.create.file=from batch_item
where.clause.create.file=WHERE correlation_id =:correlationId AND entity_type =:entityType AND isValid =1 and id >= :startKey and id <= :endKey
sortKey.clause.create.file=id

inv.select.clause.create.file=select *
inv.from.clause.create.file=from inv_batch_item
inv.where.clause.create.file=WHERE correlation_id =:correlationId AND entity_type =:entityType AND isValid =1 and id >= :startKey and id <= :endKey
inv.sortKey.clause.create.file=id
###########################################batch item table entries###########################
insert.clause.ingest.stage.batch_item=INSERT INTO batch_item (correlation_id,item_xml_data,isValid,error_message,entity_type) values (:correlationId,:itemXMLData,:isValid,:errorMessage,:entityType)
batch_item=batch_item

######################################site attributes#######################################
siteattribute.insert.clause.je=INSERT into tbl_Import_Common_Entity_Attribute_SiteItemValue (SiteCode,AttributeName,AttributeLookupCode,AttributeTreeLookupCode,ParentAttributeTreeLookupCode,Value_ShortString,Value_DateTime,Value_Float,Value_Int,Value_Bit,Value_Xml,Value_LongString,Value_Object) values(:siteCode, :attributeName, :attributeLookupCode, :attributeTreeLookupCode,:parentAttributeTreeLookupCode,:valueShortstring,:valueDatetime, :valueFloat, :valueInt,:valueBit,:valueXML,:valueLongstring,:valueObject)

######################################historical inventory#################################
historicalinventory.insert.clause.je=INSERT into ctbl_Import_HistoricalInventory(ItemCode,SiteCode,Date,CostDollars,Units,RetailDollars) values(:itemCode,:siteCode,:date,:costDollars,:units,:retailDollars)

######################################CNV Historical Inventory################################
cnvhistoricalinventory.insert.temp_dataload_shc_cnvhistoricalinventory=INSERT INTO temp_dataload_shc_cnvhistoricalinventory (wk_end_day_nbr,locn_nbr,prd_irl_no,div_no,itm_no,sku_no,ins_sub_typ_cd,itm_prg_dt,oh_un_qty,oh_cst_dlr,oh_sll_dlr) values (:wkendDayNbr,:locnNbr,:prdIrlNo,:divNo,:itmNo,:skuNo,:insSubTypCd,:itmPrgDt,:ohUnQty,:ohCstDlr,:ohSllDlr)
cnvhistoricalinventory.insert.clause.je=Insert into ctbl_Import_HistoricalInventory(ItemCode,SiteCode,Date,CostDollars,Units) values(:itemCode,:siteCode,:date,:costDollars,:units)
cnvhistoricalinventory.select.clause=SELECT * 
cnvhistoricalinventory.from.clause=FROM temp_dataload_shc_cnvhistoricalinventory_enriched 
cnvhistoricalinventory.where= WHERE sent_to_je = 0 and id >= :startKey and id <= :endKey 
cnvhistoricalinventory.sortKey.clause=id
cnvhistoricalinventoy.updateEnrich.clause= UPDATE temp_dataload_shc_cnvhistoricalinventory_enriched SET sent_to_je =:sentToJe where id =:id

######################################CNV ItemBuild991################################
########################### Query to fetch data from Netsuite Lookup Inventory Items############################
cnvitembuild991.inventoryitems.select.clause.netsuite=select * from ( SELECT rownum r, temp.* FROM( \
SELECT LIST_ITEM_NAME 'ITEM DESIGNATION', SHC_ITEM_NUMBER, item_id
cnvitembuild991.inventoryitems.from.clause.netsuite=FROM ITEMS JOIN ITEM_DESIGNATION_VALUES ON ITEMS.ITEM_DESIGNATION_ID = ITEM_DESIGNATION_VALUES.LIST_ID WHERE LIST_ITEM_NAME IN ('AS-IS MASTER ITEM', 'NEW ITEM') ) temp )
cnvitembuild991.inventoryitems.where.clause.netsuite=where r >= :startKey and r <= :endKey
cnvitembuild991.inventoryitems.sortKey.clause.netsuite=r

########################### Query to fetch data from Netsuite Lookup Inventory Adjustments############################
cnvitembuild991.inventoryadjustment.select.clause.netsuite=select * from ( SELECT rownum r, temp.* FROM( \
select l.location_id, l.name 'Location Name', l.pos_number,  sub.name 'Subsidiary',subsidiary_id 'Subsidiary Internal ID', BIN_ID 'Bin Internal ID', BIN_NUMBER
cnvitembuild991.inventoryadjustment.from.clause.netsuite=from locations l left outer join  subsidiary_location_map slm  on slm.location_id=l.location_id join subsidiaries sub on sub.subsidiary_id = slm.subsidiary_id left outer join  BINS  on  LOCATIONS.LOCATION_ID  = BINS.LOCATION_ID where BIN_NUMBER  LIKE '%Saleable%' ) temp )
cnvitembuild991.inventoryadjustment.where.clause.netsuite=where r >= :startKey and r <= :endKey
cnvitembuild991.inventoryadjustment.sortKey.clause.netsuite=r

########################### Query to fetch data from Netsuite Lookup Cadence############################
cnvitembuild991.cadence.select.clause.netsuite=select * from ( SELECT rownum r, temp.* FROM( \
SELECT CADENCE_TABLE_LINE_ID 'Cadence Level Internal ID', CADENCE_TABLE_LINE_NAME 'Cadence Level Name'
cnvitembuild991.cadence.from.clause.netsuite=from CADENCE_TABLE_LINE ) temp )
cnvitembuild991.cadence.where.clause.netsuite=where r >= :startKey and r <= :endKey
cnvitembuild991.cadence.sortKey.clause.netsuite=r

########################### Query to fetch data from Netsuite Lookup PriceList############################
cnvitembuild991.pricelist.select.clause.netsuite=select * from ( SELECT rownum r, temp.* FROM( \
select distinct NAME 'Price Level',ITEM_PRICE_ID 'Price Level Internal ID'
cnvitembuild991.pricelist.from.clause.netsuite=from item_prices WHERE NAME IN ('Base Price', 'Alternate Price 2', 'Alternate Price 3', 'Alternate Price 1', '201', '202', '203', '204', '205', '206', 'Online Price') ) temp )
cnvitembuild991.pricelist.where.clause.netsuite=where r >= :startKey and r <= :endKey
cnvitembuild991.pricelist.sortKey.clause.netsuite=r

cnvitembuild991.insert.temp_dataload_inv_items=insert into temp_dataload_inv_items(division_nbr,item_nbr,sku_nbr,transaction_nbr,regular_price,reduced_price,cadence_level,store_number,item_condition) values (:divisionNo,:itemNo,:skuNo,:transactionNo,:regularPrice,:reducedPrice,:cadenceLevel,:storeNo,:itemCondition)

cnvitembuild991.inventoryitems.insert.clause=insert into temp_lookup_ns_inv_items(list_item_name,SHC_ITEM_NUMBER,item_id) values (:listItemNo,:shcItemNo,:itemId)

cnvitembuild991.inventoryadjustment.insert.clause=insert into temp_lookup_ns_inv_adjust(location_id,pos_number,loc_name,subsdiary_name,subsidiary_id,bin_id,bin_number) values (:locationId,:posNo,:locationName,:subsidiaryName,:subsidiaryId,:binId,:binNo)

cnvitembuild991.cadence.insert.clause=insert into temp_lookup_ns_cadence(CADENCE_TABLE_LINE_ID,CADENCE_TABLE_LINE_NAME) values (:cadenceTableLineId,:cadenceTableLineName)

cnvitembuild991.pricelist.insert.clause=insert into temp_lookup_ns_pricelist(price_level,item_price_id) values (:priceLevel,:itemPriceId)


#################################CNV Receipts###################################################
cnvreceipts.insert.temp_dataload_shc_cnvreceipts=INSERT INTO temp_dataload_shc_cnvreceipts (wk_end_day_nbr,locn_nbr,prd_irl_no,div_no,itm_no,sku_no,rcp_typ_cd,itm_prg_dt,rcp_un_qt,rcp_cst_dlr,rcp_sll_dlr) values (:wkEndDayNbr,:locnNbr,:prdIrlNbr,:divNbr,:itmNbr,:skuNbr,:rcpTypCd,:itmPrgDt,:rcpUnQt,:rcpCstDlr,:rcpSllDlr) 
cnvreceipts.insert.clause.je.header=Insert into tbl_API_Import_SupplierOrder_Header(PurchaseOrderNumber,PurchaseOrderDate,OrderCancelledDate,IBTFlag,SupplierOrderStatus,ReceiveNoLaterThan,ReceiveNoEarlierThan,AuditReceipt,BatchID) values(:purchase_order_number,:purchase_order_date,:order_cancelled_date,:ibt_flag,:supplier_order_status,:receive_no_later_than,:receive_no_earlier_than,:auditReceipt,:batchID)
cnvreceipts.select.clause.supplier=SELECT *
cnvreceipts.from.clause.supplier=FROM temp_dataload_shc_cnv_supplier_receipts_enriched
cnvreceipts.where.clause.supplier=WHERE sent_to_je = 0 and id >= :startKey AND id <= :endKey
cnvreceipts.sortKey.clause.supplier=id
syncjecnvreceipts.grid.size=5
cnvreceipts.update.clause.supplier=UPDATE temp_dataload_shc_cnv_supplier_receipts_enriched SET sent_to_je =:sent_to_je where id =:id



cnvreceipts.insert.clause.je.line=Insert into tbl_API_Import_SupplierOrder_Line(PurchaseOrderNumber,PurchaseOrderLineNumber,SiteCode,ItemCode,EstimatedReceiptDate,OrderedQuantity,CostPerUnit,OrderLineStatusIndicator,SupplierCode,CurrencyCode,IBTSiteCode,OutstandingQuantity,CustomSupplierOrderStatusCode,FreightMethodDescription,InternalModifiedReceiptDate,SupplierModifiedReceiptDate,InitialReceiptDate,AuditReceipt,BatchID) values(:purchase_order_number,:purchase_order_line_number,:site_code,:item_code,:estimated_receipt_date,:ordered_quantity,:cost_per_unit,:order_line_status_indicator,:supplier_code,:currency_code,:ibt_site_code,:outstanding_quantity,:custom_supplier_order_status_code,:freight_method,:internal_modified_receipt_date,:supplier_modified_receipt_date,:initial_receipt_date,:auditReceipt,:batchID)
cnvreceipts.select.clause.line=SELECT *
cnvreceipts.from.clause.line=FROM temp_dataload_shc_cnv_supplier_order_line_enriched
cnvreceipts.where.clause.line=WHERE sent_to_je = 0 and id >= :startKey AND id <= :endKey
cnvreceipts.sortKey.clause.line=id
cnvreceipts.update.clause.line=UPDATE temp_dataload_shc_cnv_supplier_order_line_enriched SET sent_to_je =:sent_to_je where id =:id


cnvreceipts.insert.clause.je.supplier=Insert into tbl_API_Import_SupplierOrder_Receipt(GRVNumber,PurchaseOrderNumber,SiteCode,ItemCode,ReceivedQuantity,ActualReceiptDate,IBTSourceSite,SupplierCode,PurchaseOrderLineNumber,AuditReceipt,BatchID) values(:grv_Number,:purchase_Order_Number,:site_Code,:item_Code,:received_Quantity,:actual_Receipt_Date,:ibt_Source_Site,:supplier_code,:purchase_order_line_number,:auditReceipt,:batchID)
cnvreceipts.select.clause.header=SELECT *
cnvreceipts.from.clause.header=FROM temp_dataload_shc_cnv_supplier_order_header_enriched
cnvreceipts.where.clause.header=WHERE sent_to_je = 0 and id >= :startKey AND id <= :endKey
cnvreceipts.sortKey.clause.header=id
cnvreceipts.update.clause.header=UPDATE temp_dataload_shc_cnv_supplier_order_header_enriched SET sent_to_je =:sent_to_je where id =:id


################################## [ITEM INGEST] ##########################################
########################### Query to fetch data from Netsuite #############################

item.select.clause.netsuite=  SELECT * FROM ( select rownum r, temp.* from (SELECT NAME ITEM_ID,SALESDESCRIPTION,DISPLAYNAME,SHC_ITEM_NUMBER,ISINACTIVE,decode(items.isinactive,'Yes',0,1)ItemMasterActiveFlag,CASE WHEN displayname IS NOT NULL THEN displayname ELSE to_char(item_id) END mycolumn
item.from.clause.netsuite=FROM ITEMS WHERE ITEM_ID >0 AND ITEM_DESIGNATION_ID in (SELECT list_id from ITEM_DESIGNATION_VALUES where list_item_name in ('NEW ITEM','AS-IS MASTER ITEM')) and type_name='Inventory Item') temp )
item.where.clause.netsuite= where r >= :startKey and r <= :endKey
item.sortKey.clause.netsuite=r
item.next.flow=process
syncnsitem.grid.size=5

################################## [SITE INGEST] #########################################
########################### Query to fetch data from Netsuite ############################
site.select.clause.netsuite=select * from (select rownum r, temp.* from (SELECT locations.location_id, \
       locations.name,  \
       CASE \
       when  \
       locations.location_desc is null \
       then locations.name  \
       else  locations.location_desc \
       end 'Location Description', \
       locations.country, \
       locations.isinactive, \
       contacts.full_name, \
       locations.address_one, \
       locations.address_two, \
       locations.city, locations.state,\
       locations.zipcode,  \
       locations.phone,  \
       locations.fax_,  \
       locations.location_email, \
        REGEXP_SUBSTR(locations.full_name, '[^:]+',1,1) SiteGroup1, \
        REGEXP_SUBSTR(locations.full_name, '[^:]+',1,2) SiteGroup2, \
        REGEXP_SUBSTR(locations.full_name, '[^:]+',1,3) SiteGroup3, \
        REGEXP_SUBSTR(locations.full_name, '[^:]+',1,5) SiteGroup4, \
        REGEXP_SUBSTR(locations.full_name, '[^:]+',1,6) SiteGroup5,\
        NULL SiteGroup6 
site.from.clause.netsuite= FROM locations LEFT OUTER JOIN contacts \
        ON locations.location_contact_id = contacts.contact_id \
        JOIN location_types \
        ON locations.location_type_id = location_types.list_id \
                AND location_types.list_item_name IN ('ORDC', 'Retail', 'SHO DDC', 'SHO RRC', 'DC','SHO RRC (3PL)','SHO DDC (3PL)') )temp)
site.where.clause.netsuite =where r >= :startKey and r <= :endKey
site.sortKey.clause.netsuite=r

site.virtualstore.select.clause.netsuite = select * from (select rownum r, temp.* from (select VIRTUAL_STORE.VIRTUAL_STORE_NAME, \
		CASE \
			when VIRTUAL_STORE.LOCATION_DESCRIPTION is null \
				then VIRTUAL_STORE.VIRTUAL_STORE_NAME \
			else  \
				VIRTUAL_STORE.LOCATION_DESCRIPTION \
		end 'Location Description', \
		VIRTUAL_STORE.IS_INACTIVE, \
		VIRTUAL_STORE.ADDRESS_LINE_1, \
		VIRTUAL_STORE.ADDRESS_LINE_2, \
		VIRTUAL_STORE.ADDRESS_CITY, \
		VIRTUAL_STORE.ADDRESS_STATE, \
		VIRTUAL_STORE.ADDRESS_ZIP, \
		REGEXP_SUBSTR(VIRTUAL_STORE.SUBLOCATION_OF, '[^:]+',1,1) SiteGroup1, \
		REGEXP_SUBSTR(VIRTUAL_STORE.SUBLOCATION_OF, '[^:]+',1,2) SiteGroup2, \
		REGEXP_SUBSTR(VIRTUAL_STORE.SUBLOCATION_OF, '[^:]+',1,3) SiteGroup3, \
		REGEXP_SUBSTR(VIRTUAL_STORE.SUBLOCATION_OF, '[^:]+',1,5) SiteGroup4, \
		REGEXP_SUBSTR(VIRTUAL_STORE.SUBLOCATION_OF, '[^:]+',1,6) SiteGroup5, \
		NULL SiteGroup6 
site.virtualstore.from.clause.netsuite = from  VIRTUAL_STORE ) temp ) 
site.virtualstore.where.clause.netsuite = where r >= :startKey and r <= :endKey
site.virtualstore.sortKey.clause.netsuite = r
site.next.flow = process
syncnssite.grid.size = 10

#########################################@@ SUPERSESSION QUERIES- used in INGEST job @@ ##################################
supersession.select.clause.netsuite=SELECT item_id,items.NAME 'New Item Code',t1.name 'Supereded_Item_Code',LIKE_ITEM_ID,t2.name 'Like_Item_Code'
supersession.from.clause.netsuite=FROM items, items t1, items t2
supersession.where.clause.netsuite=WHERE (ITEM_ID > 0 AND ITEM_ID >= :startKey  and ITEM_ID <= :endKey) and items.SUPERSEDE_FROM_ID = t1.item_id(+) and items.LIKE_ITEM_ID = t2.item_id(+) and upper( items.isinactive ) = 'NO' and (items.SUPERSEDE_FROM_ID is not null or items.LIKE_ITEM_ID is not null) 
supersession.sortKey.clause.netsuite=item_id
supersession.insert.clause.je=INSERT INTO tbl_ImportSupersession(SiteCode,OldItemCode,NewItemCode,ForForecastRatio,ForReplenishmentRatio,ForForecast,ForReplenishment,OldItemType) VALUES(:siteCode,:oldItemCode,:newItemCode,:forForecastRatio,:forReplenishmentRatio,:forForecastFlag,:forReplenishmentFlag,:oldItemType);

#supersession.select.clause.netsuite=Select ITEM_ID,NAME,SUPERSEDE_FROM_ID, LIKE_ITEM_ID
#supersession.from.clause.netsuite=FROM ITEMS
#supersession.where.clause.netsuite=WHERE (ITEM_ID > 0 AND ITEM_ID >= :startKey  and ITEM_ID <= :endKey) and upper( ISINACTIVE ) = upper('No') and (LIKE_ITEM_ID is not null or SUPERSEDE_FROM_ID is not null) 
#supersession.sortKey.clause.netsuite=ITEM_ID
#supersession.insert.clause.je=INSERT INTO tbl_ImportSupersession(SiteCode,OldItemCode,NewItemCode,ForForecastRatio,ForReplenishmentRatio,ForForecast,ForReplenishment,OldItemType) VALUES(:siteCode,:oldItemCode,:newItemCode,:forForecastRatio,:forReplenishmentRatio,:forForecastFlag,:forReplenishmentFlag,:oldItemType);


################################## [ VENDOR INGEST] #########################################
########################### Query to fetch data from Netsuite ############################
vendor.select.clause.netsuite=select vendors.vendor_id, \
vendors.name "VendorID", \
vendors.Full_Name, \
vendor_ship_point.Vendor_ship_point_id, \
vendors.CompanyName, \
vendor_ship_point.Vendor_Ship_Point_Name,\
contacts.full_name'ContactFullName',\
contacts.name'Contact',\
vendor_ship_point.Address_1,\
vendor_ship_point.City,\
vendor_ship_point.State,\
vendor_ship_point.Zip,\
contacts.Legacy_Vendor_Number,\
vendors.isinactive
vendor.from.clause.netsuite=from vendors left outer join vendor_ship_point on vendors.vendor_id = vendor_ship_point.vendor_id \
    left join companycontactmap on vendors.vendor_id = companycontactmap.company_id \
    left outer join contacts ON contacts.contact_id = companycontactmap.contact_id 
vendor.where.clause.netsuite=where vendors.vendor_type_id=(select vendor_type_id from vendor_types where upper(name) = upper('Merchandise')) \
                and (companycontactmap.contactrole_id = (select contactrole_id from contactrole where upper(contactrole.name) = upper('primary contact')) \
                or companycontactmap.contactrole_id is null) and vendors.vendor_id > 0 \
 				and vendors.vendor_id >= :startKey  and vendors.vendor_id <= :endKey
vendor.sortKey.clause.netsuite=vendors.vendor_id
vendor.next.flow = process
syncnsvendor.grid.size = 5

################################## [ SITE OPEN CLOSED INGEST] ###############################################################
############################## Query to fetch data from Netsuite ############################################################
siteopenclosed.select.clause.netsuite=SELECT locations.name, to_char(location_details.close_date,'YYYY-MM-DD HH24:MI:SS')'CLOSE_DATE', to_char(location_details.OPEN_DATE,'YYYY-MM-DD HH24:MI:SS')'OPEN_DATE' 
siteopenclosed.from.clause.netsuite=FROM location_details,locations  
siteopenclosed.where.clause.netsuite=WHERE location_details.location_id = locations.location_id AND ((location_details.close_date IS NOT NULL AND ROUND((datediff(day,sysdate(),location_details.CLOSE_DATE)/365.2425),0)<= 4 ) OR location_details.close_date IS NULL) and locations.name >= :startKey and locations.name <= :endKey  
siteopenclosed.sortKey.clause.netsuite=locations.name
siteopenclosed.insert.clause.je=Insert INTO tbl_Import_SiteStatus(SiteCode,SiteStatusCode,StartDate,EndDate) VALUES (:siteCode,:siteOpenClosedStatus,:siteStatusStartDate,:siteStatusEndDate);

################################### [ FINANCIAL PLAN SITE STATUS INGEST] ###############################################################
############################### Query to fetch data from Netsuite ############################################################
#financialPlanSiteStatus.select.clause.netsuite= select locations.location_id 'location_id', locations.name 'name', location_details.OPEN_DATE 'OPEN_DATE', location_details.COMP_STORE_DATE 'COMP_STORE_DATE',  location_details.GOING_OUT_OF_BUSINESS_GOB_DAT 'GOING_OUT_OF_BUSINESS_GOB_DAT',location_details.close_date 'close_date'
#financialPlanSiteStatus.from.clause.netsuite= from location_details, locations
#financialPlanSiteStatus.where.clause.netsuite= where location_details.location_id = locations.location_id and ((location_details.close_date is not null and (round(datediff(day,sysdate(),location_details.close_date)/365.2425,0))<4) or location_details.close_date is null) AND locations.location_id >= :startKey  and locations.location_id <= :endKey
#financialPlanSiteStatus.sortKey.clause.netsuite= locations.location_id

################################## [ FINANCIAL PLAN SITE STATUS INGEST] ###############################################################
############################## Query to fetch data from Netsuite ############################################################
financialPlanSiteStatus.select.clause.netsuite= select locations.name, to_char(location_details.OPEN_DATE,'YYYY-MM-DD HH24:MI:SS')'OPEN_DATE', to_char(location_details.COMP_STORE_DATE,'YYYY-MM-DD HH24:MI:SS')'COMP_STORE_DATE', to_char(location_details.GOING_OUT_OF_BUSINESS_GOB_DAT,'YYYY-MM-DD HH24:MI:SS')'GOING_OUT_OF_BUSINESS_GOB_DAT', to_char(location_details.CLOSE_DATE,'YYYY-MM-DD HH24:MI:SS')'CLOSE_DATE' 
financialPlanSiteStatus.from.clause.netsuite= from location_details, locations 
financialPlanSiteStatus.where.clause.netsuite= where location_details.location_id = locations.location_id and locations.name >= :startKey and locations.name <= :endKey 
financialPlanSiteStatus.sortKey.clause.netsuite= locations.name

financialplansitestatus.insert.clause.je= INSERT INTO tbl_Import_FinancialPlan_Site_Status(SiteCode,CompStatus,CompStatusStartDate,CompStatusEndDate,ItemMasterGroup1Code,ItemMasterGroup2Code,ItemMasterGroup3Code,ItemMasterGroup4Code,ItemMasterGroup5Code,ItemMasterGroup6Code,ItemMasterGroup7Code,ItemMasterGroup8Code,ItemMasterGroup9Code,ItemMasterGroup10Code,ItemMasterGroup11Code,ItemMasterGroup12Code,ItemMasterGroup13Code,ItemMasterGroup14Code,ItemMasterGroup15Code,ItemMasterGroup16Code,ItemMasterGroup17Code,ItemMasterGroup18Code,ItemMasterGroup19Code,ItemMasterGroup20Code) VALUES (:siteCode,:CompStatus,:CompStatusStartDate,:CompStatusEndDate,:ItemMasterGroup1Code,:ItemMasterGroup2Code,:ItemMasterGroup3Code,:ItemMasterGroup4Code,:ItemMasterGroup5Code,:ItemMasterGroup6Code,:ItemMasterGroup7Code,:ItemMasterGroup8Code,:ItemMasterGroup9Code,:ItemMasterGroup10Code,:ItemMasterGroup11Code,:ItemMasterGroup12Code,:ItemMasterGroup13Code,:ItemMasterGroup14Code,:ItemMasterGroup15Code,:ItemMasterGroup16Code,:ItemMasterGroup17Code,:ItemMasterGroup18Code,:ItemMasterGroup19Code,:ItemMasterGroup20Code)

################################## [ ItemAttribute INGEST] #########################################
########################### Query to fetch data from Netsuite ############################
itemAttribute.select.clause.netsuite=select items.item_id 'ItemId',items.name 'ItemCode',t2.displayname 'Superseeded From' ,t3.displayname 'Like Item' ,items.KCD_ITEM 'KCD Item' ,vendors.full_name 'Vendor',items.MANUFACTURER 'Manufacturer',items.SAFETY_STOCK_days 'Safety Stock Level Days',items.REORDER_MULTIPLE 'Reorder Multiple',items.ISINACTIVE 'Inactive',items.MINIMUM_QUANTITY 'Minimum Quantity',brand_name.brand_name_name 'Brand',colors.LIST_ITEM_NAME 'Color',color_family.LIST_ITEM_NAME 'Color Family',FUEL_TYPE.list_item_name 'Fuel Type', \
buy_type.list_item_name 'Disposition',items.CAPACITY_CU__FT_  'Capacity', sell_through_rates.list_item_name 'Sell Through Rate', item_status.list_item_name 'Life Cycle Status',t12.displayname 'Related New Item', units_type.NAME 'Unit of Measure',items.ORDER_MULTIPLE__DC'Order Multiple DC',(Select restock_method.list_item_name FROM restock_method WHERE list_id = items.N_3H_RESTOCK_METHOD_ID) 'Restock Method 3H',(Select restock_method.list_item_name FROM restock_method WHERE list_id = items.OUTLET_RESTOCK_METHOD_ID) 'Restock Method Outlet', \
(select plural_name from uom where uom.UNITS_TYPE_ID = items.UNITS_TYPE_ID and uom.UOM_ID = items.Sale_UNIT_ID ) 'Sale Units',(select plural_name from uom where uom.UNITS_TYPE_ID = items.UNITS_TYPE_ID and uom.UOM_ID = items.purchase_UNIT_ID ) 'Purchase Units', \
(select plural_name from uom where uom.UNITS_TYPE_ID = items.UNITS_TYPE_ID and uom.UOM_ID = items.STOCK_UNIT_ID ) 'Stock Units' 
itemAttribute.from.clause.netsuite=from items, items t2, items t3, vendors , brand_name , colors , color_family , FUEL_TYPE , buy_type, sell_through_rates,item_status, items t12, units_type 
itemAttribute.where.clause.netsuite=where items.supersede_from_id = t2.item_id(+) and items.like_item_id = t3.item_id(+) and items.vendor_id = vendors.vendor_id(+) and \
items.item_brand_id = brand_name.brand_name_id(+) and items.color_id = colors.LIST_ID(+)  and items.color_family_id = color_family.list_id(+) and items.FUEL_TYPE_id = FUEL_TYPE.list_id(+) and \
items.buy_type_id = buy_type.list_id(+) and items.sell_through_rate_id = sell_through_rates.list_id(+) and items.LIFE_CYCLE_STATUS_ID = item_status.list_id(+) and items.RELATED_NEW_ITEM_RECORD_ID = t12.item_id(+) and \
items.UNITS_TYPE_ID = units_type.UNITS_TYPE_ID(+) and items.item_designation_id in (select list_id from ITEM_DESIGNATION_VALUES where list_item_name in ('NEW ITEM','AS-IS MASTER ITEM')) and parent_id is null and items.item_id > 0 and items.item_id >= :startKey  and items.item_id <= :endKey 
itemAttribute.sortKey.clause.netsuite=items.item_id
itemAttribute.insert.clause.je=INSERT INTO tbl_Import_Common_Entity_Attribute_ItemMasterItemValue(ItemMasterCode,AttributeName,AttributeLookupCode,AttributeTreeLookupCode,ParentAttributeTreeLookupCode,Value_Shortstring,Value_Datetime,Value_Float,Value_Int,Value_Bit,Value_XML,Value_Longstring) VALUES (:itemMasterCode,:attributeName,:attributeLookupCode,:attributeTreeLookupCode,:parentAttributeTreeLookupCode,:valueShortstring,:valueDatetime,:valueFloat,:valueInt,:valueBit,:valueXML,:valueLongstring) 

################################## [ Inventory INGEST] #########################################
########################### Query to fetch data from Netsuite ############################
inv.insert.clause.je=INSERT INTO tbl_ImportInventory (siteCode, itemCode, freightMethod, creationDate, firstStockedDate, lastStockCountDate,lastIssueDate, lastReceiptDate, unitOfIssue, stockOnHand,  stockReserved, defaultCostPrice, defaultSellingPrice,  itemsInUse, itemMeanTimeBetweenFailure, supplierCode,  sourceSite, fromSupplierFlag, stockingIndicator, issueMultipleUnits, minimumSafetyStockUnits, useMaximumStockFlag, \
   hostSystemLeadTimeDays, useMaximumOrderQuantityFlag, minimumOrderQuantity,  maximumOrderQuantity, orderMultiple, unitofMeasure, maximumStockUnits) values (:siteCode, :itemCode, :freightMethod, :creationDate, :firstStockedDate, :lastStockCountDate,:lastIssueDate, :lastReceiptDate, :unitOfIssue, :stockOnHand,  :stockReserved, :defaultCostPrice, :defaultSellingPrice,  :itemsInUse, :itemMeanTimeBetweenFailure, :supplierCode,  :sourceSite, :fromSupplierFlag, :stockingIndicator, :issueMultipleUnits, :minimumSafetyStockUnits, :useMaximumStockFlag, \
  :hostSystemLeadTimeDays, :useMaximumOrderQuantityFlag, :minimumOrderQuantity,  :maximumOrderQuantity, :orderMultiple, :unitofMeasure, :maximumStockUnits)


inventorystore.select.clause.netsuite=select * from ( SELECT rownum r, temp.* FROM( \
SELECT p.name 'SiteCode', items.name 'ItemCode', uom.plural_name,   \
NULL 'FreightMethod', \
NULL 'CreationDate', p.FIRST_STOCKED_DATE 'FirstStockedDate', NULL 'LastStockCountDate', NULL 'LastIssueDate', NULL 'LastReceiptDate',  \
     'Y' 'StockingIndicator', \
     NULL 'IssueMultipleUnits', \
     DECODE(fp.LIST_ITEM_NAME,'Store Stock',0, p.MINIMUM_ON_HAND_QUANTITY) 'MinimumSafetyStockUnits', \
     NULL 'MinimumSafetyStockDays', \
     NULL 'UseMaximumStockFlag', \
     ilm.NS_LEAD_TIME 'HostSystemLeadTimeDays', \
     NULL 'UseMaximumOrderQuantityFlag', \
     NULL 'MinimumOrderQuantity', \
     NULL 'MaximumOrderQuantity', \
   CASE \
    WHEN p.LIST_ITEM_NAME <> 'Retail'  \
    THEN 1 \
    WHEN p.LIST_ITEM_NAME ='Retail' AND fp.LIST_ITEM_NAME in ('SHC RRC', 'SHC DDC', 'Vendor Direct', 'Store Stock') \
     THEN 1 \
    WHEN p.LIST_ITEM_NAME IN ('Retail') AND fp.LIST_ITEM_NAME in ('SHO RRC', 'SHO DDC', 'ORDC') \
    THEN 0 \
    ELSE 0 \
     END 'FromSupplierFlag', \
     DECODE(p.NONSTOCKED_ITEM, 'T', 1, 'F', 0, 0) 'ItemsInUse', \
     NULL  'ItemMeanTimeBetweenFailure', \
     CASE WHEN fp.LIST_ITEM_NAME IN ('SHO RRC', 'SHO DDC', 'ORDC')   \
           AND p.LIST_ITEM_NAME ='Retail'  \
       THEN location1.name  \
       ELSE NULL  \
     END 'SourceSite', \
    CASE  \
      WHEN fp.LIST_ITEM_NAME IN ('SHC RRC', 'SHC DDC', 'SHO RRC', 'SHO DDC', 'ORDC') \
         THEN items.order_multiple__dc \
      WHEN fp.LIST_ITEM_NAME IN ('Vendor Direct','Store Stock') \
         THEN items.reorder_multiple \
      ELSE 1 \
     END 'OrderMultiple', \
      NULL 'UnitofMeasure', \
    CASE \
      WHEN \
       (RESTOCK_METHOD.list_id IS NOT NULL OR rm1.list_id IS NOT NULL) \
   AND  REPLENISHMENT_STATUSES.list_id IS NOT NULL \
      THEN  0 \
      WHEN fp.LIST_ITEM_NAME ='Store Stock' THEN \
            0 \
      else \
     p.MAXIMUM_ON_HAND_QUANTITY  \
     end 'MaximumStockUnits', \
     CASE \
       WHEN p.LIST_ITEM_NAME <> 'Retail' or (p.LIST_ITEM_NAME ='Retail' AND fp.LIST_ITEM_NAME in ('SHC RRC', 'SHC DDC', 'Vendor Direct', 'Store Stock')) \
       THEN  \
         CASE WHEN fp.LIST_ITEM_NAME = 'SHC RRC' THEN \
                   vendors.name ||':' || (SELECT shc_rrc FROM locations WHERE location_id = p.location_id) \
              WHEN fp.LIST_ITEM_NAME = 'SHC DDC' THEN  \
                   vendors.name ||':' || (SELECT shc_ddc FROM locations WHERE location_id = p.location_id) \
              ELSE \
                   vendors.name ||':' || '0000' \
          END \
     END  'suppliercode',    \
    StockOnHand, \
    DefaultCostPrice, \
    DefaultSellingPrice, \
StockReserved
inventorystore.from.clause.netsuite=from  \
( \
select parent_id, name,location_id,list_item_name,sho_ddc_id,sho_rrc_id, primary_ordc_id,MIN(FIRST_STOCKED_DATE) as FIRST_STOCKED_DATE ,MIN(MINIMUM_ON_HAND_QUANTITY) as MINIMUM_ON_HAND_QUANTITY, \
NONSTOCKED_ITEM, MIN(MAXIMUM_ON_HAND_QUANTITY) as MAXIMUM_ON_HAND_QUANTITY,REPLENISHMENT_STATUS_ID, \
SUM(StockOnHand) as StockOnHand,SUM(StockReserved) as StockReserved,(SUM(DefaultCostPrice)/ DECODE(SUM(child_cnt),0,1,SUM(child_cnt))) as DefaultCostPrice , \
(SUM(DefaultSellingPrice)/DECODE(SUM(child_cnt),0,1,SUM(child_cnt))) as DefaultSellingPrice, SUM(child_cnt) as child_cnt   \
 from  \
( \
SELECT  \
CASE \
  WHEN location_types.LIST_ITEM_NAME = 'Retail' AND UPPER(BIN_NUMBER_COUNTS.bin_number) like '%SALEABLE%' \
     THEN \
        CASE WHEN idv.list_item_name = 'AS-IS MASTER ITEM' THEN \
             0 \
        ELSE        \
         BIN_NUMBER_COUNTS.available_count \
       END \
  ELSE 0 \
END 'StockOnHand', \
CASE \
     WHEN location_types.LIST_ITEM_NAME = 'Retail' AND UPPER(BIN_NUMBER_COUNTS.bin_number) like '%SALEABLE%' \
       THEN \
            BIN_NUMBER_COUNTS.on_hand_count - BIN_NUMBER_COUNTS.available_count \
       ELSE 0 \
     END 'StockReserved', \
CASE \
WHEN (location_types.list_item_name = 'Retail' AND  flowpath.LIST_ITEM_NAME in ('Vendor Direct' ,'SHC DDC','SHC RRC', 'Store Stock')) \
THEN   \
   CASE WHEN idv.list_item_name = 'AS-IS MASTER ITEM' THEN \
             0 \
        ELSE \
           CASE WHEN NVL(itlm.available_count,0) = 0 THEN \
                  0 \
                ELSE \
                  NVL(itlm.last_purchase_price,0) \
           END \
    END \
ELSE  \
   CASE WHEN idv.list_item_name = 'AS-IS MASTER ITEM' THEN \
             0 \
        ELSE \
           CASE WHEN NVL(itlm.available_count,0) = 0 THEN \
                  0 \
                ELSE         \
                  NVL(itlm.average_cost,0) \
           END \
    END \
END 'DefaultCostPrice', \
CASE WHEN idv.list_item_name = 'AS-IS MASTER ITEM' THEN \
             0 \
     WHEN NVL(item_prices.item_unit_price,0) = 0 THEN \
             0 \
     ELSE \
         CASE WHEN NVL(itlm.available_count,0) = 0 THEN \
              0 \
              ELSE \
                item_prices.item_unit_price \
         END \
END  'DefaultSellingPrice',  \
CASE \
   WHEN itm.related_asis_master_item_id IS NOT NULL \
       AND idv.list_item_name = 'AS-IS INDIVIDUAL ITEM' \
       THEN               \
            itm.related_asis_master_item_id  \
   ELSE itlm.item_ID   \
END 'parent_id', \
itlm.location_id , itlm.item_id,locations.name,location_types.list_item_name, \
locations.sho_ddc_id,locations.sho_rrc_id, locations.primary_ordc_id, \
CASE \
   WHEN itm.related_asis_master_item_id IS NOT NULL \
       AND idv.list_item_name = 'AS-IS INDIVIDUAL ITEM' AND NVL(itlm.available_count,0) > 0 \
       THEN               \
            1  \
   ELSE 0   \
END 'child_cnt', itlat.FIRST_STOCKED_DATE,itlat.MINIMUM_ON_HAND_QUANTITY,itlat.NONSTOCKED_ITEM,itlat.MAXIMUM_ON_HAND_QUANTITY, itlat.REPLENISHMENT_STATUS_ID \
FROM ITEM_location_map itlm JOIN locations ON itlm.location_id = locations.location_id \
JOIN (SELECT item_id, related_asis_master_item_id, FLOWPATH_ID, item_designation_id, type_name, \
CASE WHEN related_asis_master_item_id IS NULL THEN \
          item_id \
     ELSE  \
       related_asis_master_item_id \
     END 'proxy_item_id' \
FROM items \
WHERE type_name = 'Inventory Item') itm ON itlm.item_id = itm.item_id \
JOIN location_types ON locations.location_type_id = location_types.list_id  \
JOIN (SELECT DISTINCT item_id, location_id, NVL(assorted_for,'F')  as assorted_for,FIRST_STOCKED_DATE as FIRST_STOCKED_DATE,MINIMUM_ON_HAND_QUANTITY, \
NONSTOCKED_ITEM, MAXIMUM_ON_HAND_QUANTITY,REPLENISHMENT_STATUS_ID  FROM ITEM__LOCATION_LEVEL_ATTRIBUT) itlat  ON itm.proxy_item_id = itlat.item_id AND itlm.location_id = itlat.location_id  \
AND location_types.list_item_name = 'Retail' AND itlat.assorted_for = 'T' \
LEFT OUTER JOIN flowpath ON itm.FLOWPATH_ID = flowpath.list_id  \
LEFT OUTER JOIN item_prices ON itlm.item_id = item_prices.item_id AND item_prices.item_price_id = locations.POS__PRICE_LEVEL_ID   \
LEFT OUTER JOIN BIN_NUMBER_COUNTS ON itlm.location_id = BIN_NUMBER_COUNTS.location_id AND itlm.item_id = BIN_NUMBER_COUNTS.item_id AND (UPPER(BIN_NUMBER_COUNTS.bin_number) like '%SALEABLE%') \
LEFT OUTER JOIN item_designation_values idv ON  idv.list_id = itm.item_designation_id AND idv.list_item_name IN ('AS-IS INDIVIDUAL ITEM','NEW ITEM','AS-IS MASTER ITEM' )  \
) \
GROUP BY parent_id,location_id,name,list_item_name,sho_ddc_id,sho_rrc_id, primary_ordc_id,NONSTOCKED_ITEM, REPLENISHMENT_STATUS_ID ) p \
JOIN items ON p.parent_id = items.item_id \
JOIN ITEM_location_map ilm ON ilm.location_id = p.location_id AND p.parent_id = ilm.item_id \
LEFT OUTER JOIN uom on items.sale_unit_id=uom.uom_id \
LEFT OUTER JOIN REPLENISHMENT_STATUSES ON p.REPLENISHMENT_STATUS_ID=REPLENISHMENT_STATUSES.list_id and REPLENISHMENT_STATUSES.list_item_name in('Do Not Replenish','Discontinued','Do Not Order')  \
LEFT OUTER JOIN RESTOCK_METHOD on  items.OUTLET_RESTOCK_METHOD_ID =restock_method.list_id and RESTOCK_METHOD.list_item_name='Replenishment'  \
LEFT OUTER JOIN RESTOCK_METHOD rm1 on  items.N_3H_RESTOCK_METHOD_ID =rm1.list_id and rm1.list_item_name='Replenishment' \
LEFT OUTER JOIN ITEM_VENDOR_MAP ivm ON items.item_id = ivm.item_id  \
LEFT OUTER JOIN VENDORS ON ivm.VENDOR_ID = VENDORS.VENDOR_ID  \
LEFT OUTER JOIN flowpath fp ON items.FLOWPATH_ID = fp.list_id  \
LEFT OUTER JOIN locations location1 ON ((fp.LIST_ITEM_NAME  = 'SHO RRC' AND p.SHO_RRC_ID = location1.location_id)  \
              OR (fp.LIST_ITEM_NAME  = 'SHO DDC'  AND p.SHO_DDC_ID = location1.location_id)  \
              OR (fp.LIST_ITEM_NAME  = 'ORDC' AND p.PRIMARY_ORDC_ID =  location1.location_id) ) \
              ) temp )
inventorystore.where.clause.netsuite= where r >= :startKey and r <= :endKey 
inventorystore.sortKey.clause.netsuite=r

inventorydc.select.clause.netsuite=select * from ( SELECT rownum r, temp.* FROM( \
SELECT p.name 'SiteCode', items.name 'ItemCode', uom.plural_name,   \
NULL 'FreightMethod', \
NULL 'CreationDate', att.FIRST_STOCKED_DATE 'FirstStockedDate', NULL 'LastStockCountDate', NULL 'LastIssueDate', NULL 'LastReceiptDate',  \
     'Y' 'StockingIndicator', \
     NULL 'IssueMultipleUnits', \
     DECODE(fp.LIST_ITEM_NAME,'Store Stock',0, att.MINIMUM_ON_HAND_QUANTITY) 'MinimumSafetyStockUnits', \
     NULL 'MinimumSafetyStockDays', \
     NULL 'UseMaximumStockFlag', \
     ilm.NS_LEAD_TIME 'HostSystemLeadTimeDays', \
     NULL 'UseMaximumOrderQuantityFlag', \
     NULL 'MinimumOrderQuantity', \
     NULL 'MaximumOrderQuantity', \
   CASE \
    WHEN p.LIST_ITEM_NAME <> 'Retail'  \
    THEN 1 \
    WHEN p.LIST_ITEM_NAME ='Retail' AND fp.LIST_ITEM_NAME in ('SHC RRC', 'SHC DDC', 'Vendor Direct', 'Store Stock') \
     THEN 1 \
    WHEN p.LIST_ITEM_NAME IN ('Retail') AND fp.LIST_ITEM_NAME in ('SHO RRC', 'SHO DDC', 'ORDC') \
    THEN 0 \
    ELSE 0 \
     END 'FromSupplierFlag', \
     DECODE(att.NONSTOCKED_ITEM, 'T', 1, 'F', 0, 0) 'ItemsInUse', \
     NULL  'ItemMeanTimeBetweenFailure', \
     CASE WHEN fp.LIST_ITEM_NAME IN ('SHO RRC', 'SHO DDC', 'ORDC')   \
           AND p.LIST_ITEM_NAME ='Retail'  \
       THEN location1.name  \
       ELSE NULL  \
     END 'SourceSite', \
    CASE  \
      WHEN fp.LIST_ITEM_NAME IN ('SHC RRC', 'SHC DDC', 'SHO RRC', 'SHO DDC', 'ORDC') \
         THEN items.order_multiple__dc \
      WHEN fp.LIST_ITEM_NAME IN ('Vendor Direct','Store Stock') \
         THEN items.reorder_multiple \
      ELSE 1 \
     END 'OrderMultiple', \
      NULL 'UnitofMeasure', \
    CASE \
      WHEN \
       (RESTOCK_METHOD.list_id IS NOT NULL OR rm1.list_id IS NOT NULL) \
   AND  REPLENISHMENT_STATUSES.list_id IS NOT NULL \
      THEN  0 \
      WHEN fp.LIST_ITEM_NAME ='Store Stock' THEN \
            0 \
      else \
     att.MAXIMUM_ON_HAND_QUANTITY  \
     end 'MaximumStockUnits', \
     CASE \
       WHEN p.LIST_ITEM_NAME <> 'Retail' or (p.LIST_ITEM_NAME ='Retail' AND fp.LIST_ITEM_NAME in ('SHC RRC', 'SHC DDC', 'Vendor Direct', 'Store Stock')) \
       THEN  \
         CASE WHEN fp.LIST_ITEM_NAME = 'SHC RRC' THEN \
                   vendors.name ||':' || (SELECT shc_rrc FROM locations WHERE location_id = p.location_id) \
              WHEN fp.LIST_ITEM_NAME = 'SHC DDC' THEN  \
                   vendors.name ||':' || (SELECT shc_ddc FROM locations WHERE location_id = p.location_id) \
              ELSE \
                   vendors.name ||':' || '0000' \
          END \
     END  'suppliercode',    \
    StockOnHand, \
    DefaultCostPrice, \
    DefaultSellingPrice, \
StockReserved 

inventorydc.from.clause.netsuite=from  \
( \
select parent_id, name,location_id,list_item_name,sho_ddc_id,sho_rrc_id, primary_ordc_id, \
SUM(StockOnHand) as StockOnHand,SUM(StockReserved) as StockReserved,(SUM(DefaultCostPrice)/ DECODE(SUM(child_cnt),0,1,SUM(child_cnt))) as DefaultCostPrice , \
(SUM(DefaultSellingPrice)/DECODE(SUM(child_cnt),0,1,SUM(child_cnt))) as DefaultSellingPrice, SUM(child_cnt) as child_cnt   \
 from  \
( \
SELECT \
CASE \
   WHEN NVL(location_types.LIST_ITEM_NAME, 'X') <> 'Retail' AND UPPER(bin_number.bin_number) = 'CARTON'  \
     THEN \
        CASE WHEN idv.list_item_name = 'AS-IS MASTER ITEM' THEN \
               0 \
             ELSE  \
               bin_number.available_count \
        END \
  ELSE 0 \
END 'StockOnHand', \
CASE \
       WHEN NVL(location_types.LIST_ITEM_NAME, 'X') <> 'Retail' AND UPPER(bin_number.bin_number) ='CARTON'  \
        THEN \
         bin_number.on_hand_count - bin_number.available_count \
       ELSE 0 \
     END 'StockReserved', \
CASE \
WHEN  (location_types.list_item_name <> 'Retail') \
THEN   \
   CASE WHEN idv.list_item_name = 'AS-IS MASTER ITEM' THEN \
             0 \
        ELSE \
           CASE WHEN NVL(itlm.available_count,0) = 0 THEN \
                  0 \
                ELSE \
                  NVL(itlm.last_purchase_price,0) \
           END \
    END \
ELSE  \
   CASE WHEN idv.list_item_name = 'AS-IS MASTER ITEM' THEN \
             0 \
        ELSE \
           CASE WHEN NVL(itlm.available_count,0) = 0 THEN \
                  0 \
                ELSE         \
                  NVL(itlm.average_cost,0) \
           END \
    END \
END 'DefaultCostPrice', \
CASE WHEN idv.list_item_name = 'AS-IS MASTER ITEM' THEN \
             0 \
     WHEN NVL(item_prices.item_unit_price,0) = 0 THEN \
             0 \
     ELSE \
         CASE WHEN NVL(itlm.available_count,0) = 0 THEN \
              0 \
              ELSE \
                item_prices.item_unit_price \
         END \
END  'DefaultSellingPrice',  \
CASE \
   WHEN itm.related_asis_master_item_id IS NOT NULL \
       AND idv.list_item_name = 'AS-IS INDIVIDUAL ITEM' \
       THEN               \
            itm.related_asis_master_item_id  \
   ELSE itlm.item_ID   \
END 'parent_id', \
itlm.location_id , itlm.item_id,locations.name,location_types.list_item_name, \
locations.sho_ddc_id,locations.sho_rrc_id, locations.primary_ordc_id, \
CASE \
   WHEN itm.related_asis_master_item_id IS NOT NULL \
       AND idv.list_item_name = 'AS-IS INDIVIDUAL ITEM' AND NVL(itlm.available_count,0) > 0 \
       THEN               \
            1  \
   ELSE 0   \
END 'child_cnt' \
FROM ITEM_location_map itlm JOIN locations ON itlm.location_id = locations.location_id \
JOIN (SELECT item_id, related_asis_master_item_id, FLOWPATH_ID, item_designation_id, type_name, \
CASE WHEN related_asis_master_item_id IS NULL THEN \
          item_id \
     ELSE  \
       related_asis_master_item_id \
     END 'proxy_item_id' \
FROM items \
WHERE type_name = 'Inventory Item') itm ON itlm.item_id = itm.item_id \
JOIN location_types ON locations.location_type_id = location_types.list_id  \
AND  UPPER(location_types.list_item_name) in ('ORDC', 'SHO DDC', 'SHO RRC', 'DC','SHO RRC (3PL)','SHO DDC (3PL)') \
LEFT OUTER JOIN flowpath ON itm.FLOWPATH_ID = flowpath.list_id  \
LEFT OUTER JOIN item_prices ON itlm.item_id = item_prices.item_id AND item_prices.item_price_id = locations.POS__PRICE_LEVEL_ID   \
LEFT OUTER JOIN (SELECT DISTINCT location_id, item_id,available_count,on_hand_count, CASE WHEN UPPER(bin_number) LIKE '%OUTOFCARTON%' OR  UPPER(bin_number) LIKE '%INCARTON%' THEN 'CARTON' \
                                                   ELSE \
                                                       NULL \
                                                    END 'bin_number' FROM BIN_NUMBER_COUNTS WHERE UPPER(BIN_NUMBER_COUNTS.bin_number) like '%CARTON%' ) bin_number ON itlm.location_id = bin_number.location_id AND itlm.item_id = bin_number.item_id \
LEFT OUTER JOIN item_designation_values idv ON  idv.list_id = itm.item_designation_id AND idv.list_item_name IN ('AS-IS INDIVIDUAL ITEM','NEW ITEM','AS-IS MASTER ITEM' )  \
) \
GROUP BY parent_id,location_id,name,list_item_name,sho_ddc_id,sho_rrc_id, primary_ordc_id ) p \
JOIN items ON p.parent_id = items.item_id \
JOIN ITEM_location_map ilm ON ilm.location_id = p.location_id AND p.parent_id = ilm.item_id \
LEFT OUTER JOIN uom on items.sale_unit_id=uom.uom_id \
LEFT OUTER JOIN ITEM__LOCATION_LEVEL_ATTRIBUT att ON items.item_id = att.item_id AND p.location_id = att.location_id  \
LEFT OUTER JOIN REPLENISHMENT_STATUSES ON att.REPLENISHMENT_STATUS_ID=REPLENISHMENT_STATUSES.list_id and REPLENISHMENT_STATUSES.list_item_name in('Do Not Replenish','Discontinued','Do Not Order')  \
LEFT OUTER JOIN RESTOCK_METHOD on  items.OUTLET_RESTOCK_METHOD_ID =restock_method.list_id and RESTOCK_METHOD.list_item_name='Replenishment'  \
LEFT OUTER JOIN RESTOCK_METHOD rm1 on  items.N_3H_RESTOCK_METHOD_ID =rm1.list_id and rm1.list_item_name='Replenishment' \
LEFT OUTER JOIN ITEM_VENDOR_MAP ivm ON items.item_id = ivm.item_id  \
LEFT OUTER JOIN VENDORS ON ivm.VENDOR_ID = VENDORS.VENDOR_ID  \
LEFT OUTER JOIN flowpath fp ON items.FLOWPATH_ID = fp.list_id  \
LEFT OUTER JOIN locations location1 ON ((fp.LIST_ITEM_NAME  = 'SHO RRC' AND p.SHO_RRC_ID = location1.location_id)  \
              OR (fp.LIST_ITEM_NAME  = 'SHO DDC'  AND p.SHO_DDC_ID = location1.location_id)  \
              OR (fp.LIST_ITEM_NAME  = 'ORDC' AND p.PRIMARY_ORDC_ID =  location1.location_id)  \
              ) \
              ) temp )
inventorydc.where.clause.netsuite= where r >= :startKey and r <= :endKey
inventorydc.sortKey.clause.netsuite=r

################################## [ Historical Inventory INGEST] #########################################
########################### Query to fetch data from Netsuite ############################
historicalinventory.select.clause.netsuite=SELECT * 
historicalinventory.from.clause.netsuite=FROM \
( \
SELECT rownum r, temp.* \
FROM \
( \
SELECT  ItemCode, SiteCode,SUM(Units) Units,SUM(RetailDollars) RetailDollars ,SUM(CostDollars) CostDollars \
FROM \
( \
SELECT \
CASE \
        WHEN itm.related_asis_master_item_id IS NOT NULL \
        AND idv.list_item_name = 'AS-IS INDIVIDUAL ITEM' \
            THEN \
                (SELECT name from items where item_id = itm.related_asis_master_item_id ) \
         ELSE \
            itm.name  \
      END "ItemCode", \
      locations.name SiteCode, \
		CASE \
			WHEN idv.list_item_name = 'AS-IS MASTER ITEM' \
				THEN 0 \
			ELSE \
				CASE WHEN NVL(itlm.ON_HAND_COUNT ,0) = 0 \
					THEN 0 \
				ELSE \
					itlm.ON_HAND_COUNT \
				END \
			END Units, \
			CASE \
				WHEN idv.list_item_name = 'AS-IS MASTER ITEM' \
					THEN 0 \
				ELSE \
					CASE \
						WHEN NVL(itlm.ON_HAND_COUNT ,0) = 0 \
							THEN 0 \
						ELSE \
							(NVL(item_prices.item_unit_price,0)* NVL(itlm.ON_HAND_COUNT,0)) \
						END \
					END RetailDollars, \
						CASE \
							WHEN idv.list_item_name = 'AS-IS MASTER ITEM' \
								THEN 0 \
							ELSE \
								CASE \
									WHEN NVL(itlm.ON_HAND_COUNT ,0) = 0 \
										THEN 0 \
									ELSE \
										itlm.on_hand_value \
									END \
								END CostDollars \
FROM \
	ITEM_location_map itlm JOIN locations ON itlm.location_id = locations.location_id \
	JOIN location_types \
	ON locations.location_type_id = location_types.list_id \
	JOIN items itm ON itlm.item_id = itm.item_id \
	LEFT OUTER JOIN item_designation_values idv \
	ON  idv.list_id = itm.item_designation_id \
	AND idv.list_item_name \
	IN ('AS-IS INDIVIDUAL ITEM','NEW ITEM','AS-IS MASTER ITEM') \
	LEFT OUTER JOIN ITEM_PRICES \
	ON itm.item_id = ITEM_PRICES.item_id and ITEM_PRICES.item_price_id = locations.POS__PRICE_LEVEL_ID \
WHERE \
	NVL(locations.country,'OH') NOT IN (SELECT SHORT_NAME FROM COUNTRIES WHERE  NAME = 'Bermuda') \
	AND UPPER(location_types.list_item_name) in ('SHO DDC','SHO RRC (3PL)','ORDC','RETAIL') \
	AND items.type_name ='Inventory Item' \
	AND NVL(itlm.ON_HAND_COUNT,-1) <> -1 \
	AND  itlm.ON_HAND_COUNT <> '0' \
	) \
GROUP BY ItemCode,SiteCode) temp \
)
historicalinventory.where.clause.netsuite=WHERE r >= :startKey AND r <= :endKey 
historicalinventory.sortKey.clause.netsuite=r

################################## [ Nightly Receipts INGEST] #########################################
nightlyreceipts.select.clause.netsuite=SELECT * 
nightlyreceipts.from.clause.netsuite=FROM \
( \
SELECT rownum r, temp.* \
FROM \
(\
SELECT GRVNumber, TransactionID, PurchaseOrderNumber, SiteCode, ItemCode, SUM(ReceivedQuantity) AS ReceivedQuantity, ActualReceiptDate, IBTSourceSite, vendor_name,ship_point_id \
FROM \
(\
SELECT \
trx1.tranid "GRVNumber", trx1.TRANSACTION_ID "TransactionID", \
   CASE WHEN trx2.transaction_type ='Transfer Order' THEN \
            'TO-' ||trx2.tranid \
            WHEN trx2.transaction_type ='Purchase Order' THEN \
            'PO-' || trx2.tranid \
            ELSE \
            'SO-'|| trx2.tranid \
        END 'PurchaseOrderNumber', \
      CASE \
         WHEN trx1.transaction_type = 'Item Receipt' \
            THEN \
               loc.name \
         WHEN trx1.transaction_type =  'Invoice' \
            THEN \
                t8.name \
      END "SiteCode", trxln.item_id, \
      CASE \
         WHEN NVL(itm.related_asis_master_item_id, -1) <> -1 \
             AND itm.item_designation_id IN (SELECT list_id FROM item_designation_values WHERE list_item_name = 'AS-IS INDIVIDUAL ITEM') \
            THEN \
               (SELECT name FROM items WHERE item_id = itm.related_asis_master_item_id) \
         ELSE \
            itm.name \
      END "ItemCode", \
       CASE \
      WHEN \
      trxln.item_count < 0 \
      THEN \
      (-1) * NVL(trxln.item_count,0) \
      ELSE \
      trxln.item_count \
      END  "ReceivedQuantity", \
      DECODE(trx1.transaction_type, 'Item Receipt', trx1.trandate, 'Invoice', trx2.trandate) "ActualReceiptDate", \
      CASE  \
         WHEN trx1.transaction_type = 'Item Receipt' AND trx2.transaction_type = 'Transfer Order' \
            THEN \
                ( SELECT name FROM locations where location_id = trx1.LOCATION_ID ) \
         WHEN trx1.transaction_type = 'Item Receipt' AND trx2.transaction_type = 'Purchase Order' \
            THEN \
               NULL \
         WHEN trx1.transaction_type = 'Invoice' \
            THEN \
               loc.name \
        ELSE NULL \
      END IBTSourceSite, \
      CASE \
         WHEN trx1.transaction_type = 'Item Receipt' AND trx2.transaction_type = 'Purchase Order' \
            THEN \
                v.name \
        ELSE NULL \
      END vendor_name, \
      CASE \
         WHEN trx1.transaction_type = 'Item Receipt' AND trx2.transaction_type = 'Purchase Order' \
            THEN \
                 SUBSTR(trxln1.so_reservation_,1,4)  \
        ELSE NULL \
      END ship_point_id, \
      CASE \
         WHEN NVL(itm.related_asis_master_item_id, -1) <> -1 \
         AND itm.item_designation_id IN (SELECT list_id FROM item_designation_values WHERE list_item_name = 'AS-IS INDIVIDUAL ITEM') \
               THEN \
                  itm.related_asis_master_item_id \
      END parent_item_id \
  FROM transactions trx1 JOIN transactions trx2 ON trx1.created_from_id = trx2.transaction_id AND NVL(trx2.transaction_type,'~') IN ('Transfer Order', 'Purchase Order', 'Sales Order') \
  LEFT OUTER JOIN transaction_lines trxln ON trx1.transaction_id = trxln.transaction_id AND trxln.item_id IS NOT NULL AND trxln.item_id > 0 AND DO_NOT_PRINT_LINE = 'No' \
  LEFT OUTER JOIN  transaction_lines trxln1 on trxln1.transaction_id=trx2.transaction_id \
LEFT OUTER  JOIN locations loc ON trxln.location_id = loc.location_id \
  LEFT OUTER JOIN items itm ON trxln.item_id = itm.item_id AND itm.type_name = 'Inventory Item' \
 LEFT OUTER JOIN VENDORS v ON v.VENDOR_ID = trx1.entity_id \
 LEFT OUTER JOIN SHIPPING_ITEMS t7 ON  trx2.shipping_item_id =t7.item_id \
 LEFT OUTER JOIN DEPARTMENTS t8 ON trxln.department_id = t8.DEPARTMENT_ID \
WHERE NVL(trx1.transaction_type,'~') IN  ('Item Receipt','Invoice') \
AND CASE \
        WHEN NVL(trx1.transaction_type,'~') ='Invoice' AND NVL(trx2.TRANSACTION_TYPE,'~') IN ('Sales Order') AND (NVL(t7.name,'~')) LIKE '%TO%' THEN \
            0 \
        ELSE \
            1 \
     END  = 1 ) \
 where itemcode is not null \
GROUP BY GRVNumber, TransactionID, PurchaseOrderNumber, SiteCode, ItemCode, ActualReceiptDate, IBTSourceSite, vendor_name, ship_point_id)temp \
)
nightlyreceipts.where.clause.netsuite=where r >= :startKey and r <= :endKey 

nightlyreceipts.sortKey.clause.netsuite=r

################################## [ Weekly sales history INGEST] #########################################
########################### Query to fetch data from Netsuite ############################
weeklySalesHistory.select.clause.netsuite=SELECT *
weeklySalesHistory.from.clause.netsuite=FROM (select temp.*, rownum r from (SELECT ItemId,ItemCode, ReturnFlag, SiteCode, SalesTypeCode, to_char(salesdate,'YYYY-MM-DD HH24:MI:SS')SalesDate, \
SUM(item_count) item_count, SUM(average_cost) average_cost,SUM(net_amount) net_amount, SUM(gross_amount) gross_amount \
  FROM \
  ( \
   SELECT loc.country, \
         CASE \
            WHEN itm.parent_id IS NOT NULL \
                 AND itm.item_designation_id = (SELECT list_id FROM item_designation_values WHERE UPPER(list_item_name) = 'AS-IS INDIVIDUAL ITEM') \
               THEN \
                  t1.name \
            ELSE \
               itm.name \
         END "ItemCode", \
         CASE \
            WHEN itm.parent_id IS NOT NULL \
                 AND itm.item_designation_id = (SELECT list_id FROM item_designation_values WHERE UPPER(list_item_name) = 'AS-IS INDIVIDUAL ITEM') \
               THEN \
                  t1.item_id \
            ELSE \
               itm.item_id \
         END "ItemId", \
         loc.full_name "SiteCode", \
         DECODE((SELECT COUNT(1) \
                   FROM transaction_lines \
                  WHERE transaction_id = trx.transaction_id \
                    AND trxln.item_id > 0 \
                    AND trxln.amount_foreign IS NOT NULL \
                    AND (UPPER(transaction_discount_line) = UPPER('Yes') OR price_type_id = (SELECT price_type_id FROM price_types WHERE name = 'Custom')) \
                 ), 0, 'Regular', 'Promotion' \
               ) AS SalesTypeCode, \
         CASE WHEN UPPER(trx.transaction_type) = UPPER('Return Authorization') THEN '1' ELSE '0' END "ReturnFlag", \
         CASE \
            WHEN UPPER(trx.transaction_type) = UPPER('Sales Order') \
                  AND DATEDIFF(DAY, SYSDATE(), trx.trandate) > 21 \
               THEN \
                  NEXT_DAY(TRUNC(slstrx.applied_date_posted,'IW'), 'Saturday') \
             ELSE \
             NEXT_DAY(TRUNC(trx.trandate,'IW'), 'Saturday') \
         END "SalesDate", \
         ABS(trxln.item_count) item_count, \
         ABS(trxln.item_count * ilm.average_cost) average_cost, \
         ABS (trxln.net_amount) net_amount, \
         ABS (trxln.gross_amount) gross_amount \
     FROM transactions trx LEFT OUTER JOIN transaction_lines trxln \
     ON trx.transaction_id = trxln.transaction_id \
     LEFT OUTER JOIN locations loc \
     ON DECODE(UPPER(trx.transaction_type), UPPER('Sales Order'), trxln.location_id, trx.location_id) = loc.location_id \
     LEFT OUTER JOIN items itm \
     ON itm.item_id = trxln.item_id \
     LEFT OUTER JOIN price_types prtyp \
     ON prtyp.price_type_id = trxln.price_type_id \
     LEFT OUTER JOIN item_location_map ilm \
     ON ilm.item_id = trxln.item_id \
     AND ilm.location_id = trx.location_id \
     LEFT OUTER JOIN (SELECT DISTINCT trxlnk.original_transaction_id, trxlnk.applied_date_posted \
                                         FROM transaction_links trxlnk, transactions trx1, transactions trx2 \
                                        WHERE trxlnk.original_transaction_id = trx1.transaction_id \
                                          AND trxlnk.applied_transaction_id = trx2.transaction_id \
                                          AND UPPER(trx1.transaction_type) = UPPER('Sales Order') \
                                          AND UPPER(trx2.status) = UPPER('Shipped') \
                                          AND UPPER(trxlnk.link_type) = UPPER('Receipt/Fulfillment') \
                     ) slstrx \
     ON trx.transaction_id = DECODE(UPPER(trx.transaction_type), UPPER('Sales Order'), slstrx.original_transaction_id) \
     LEFT OUTER JOIN items t1 \
     ON items.parent_id = t1.item_id \
    WHERE trxln.item_id > 0 \
      AND trxln.amount_foreign IS NOT NULL \
      AND NVL(loc.county, 'X') NOT IN (select SHORT_NAME from COUNTRIES where  NAME = 'Bermuda') \
      AND ((UPPER(trx.transaction_type) = UPPER('Sales Order') AND datediff(day,NEXT_DAY((sysdate()-7), 'Saturday'),slstrx.APPLIED_DATE_POSTED) <= 21 AND slstrx.original_transaction_id IS NOT NULL) \
       OR (UPPER(trx.TRANSACTION_TYPE) = UPPER('Cash Sale') and datediff(day,NEXT_DAY((sysdate()-7), 'Saturday'),trx.trandate) <= 21 AND trx.CREATED_FROM_ID is null AND UPPER(trx.status) = UPPER('Deposited')) \
            OR (UPPER(trx.TRANSACTION_TYPE) = UPPER('Return Authorization') AND datediff(day,NEXT_DAY((sysdate()-7), 'Saturday'),trx.trandate) <= 21 AND UPPER(trx.status) = UPPER('Refunded'))) \
   ) \
GROUP BY ItemId,ItemCode, SiteCode, SalesTypeCode, SalesDate, ReturnFlag)temp)

weeklySalesHistory.where.clause.netsuite=where r >= :startKey and r <= :endKey
weeklySalesHistory.sortKey.clause.netsuite=r
weeklySalesHistory.next.flow = process
weeklySalesHistory.grid.size = 1
weeklySalesHistory.insert.clause.ingest.stage.new=INSERT INTO batch_item (correlation_id,item_xml_data,isValid,error_message,entity_type) values (:correlationId,:itemXMLData,:isValid,:errorMessage,:entityType)
################################## [ Supplier Order INGEST] #########################################
########################### Query to fetch data from Netsuite ############################
supplierorder.select.clause.netsuite=SELECT TransactionId,PurchaseOrderNumber,PurchaseOrderDate,OrderCancelledDate,IBTFlag,SupplierOrderStatus,ReceiveNoEarlierThan,ReceiveNoLaterThan,MAX(PurchaseOrderLineNumber) as PurchaseOrderLineNumber,SiteCode,ItemCode,EstimatedReceiptDate,SUM(OrderedQuantity) as OrderedQuantity,MAX(CostPerUnit) as CostPerUnit,OrderLineStatusIndicator,SupplierCode,CurrencyCode,IBTSiteCode,SUM(OutstandingQuantity) as OutstandingQuantity,CustomSupplierOrderStatusCode,FreightMethod,InternalModifiedReceiptDate,SupplierModifiedReceiptDate,InitialReceiptDate,MIN(sysdate) AS Sysdate

supplierorder.from.clause.netsuite=FROM ( SELECT t1.transaction_id 'TransactionId',new_time(sysdate,'PST','GMT') 'Sysdate',  CASE   WHEN t1.transaction_type = 'Transfer Order' then 'TO-'||t1.tranid WHEN t1.transaction_type = 'Purchase Order' then 'PO-'||t1.tranid ELSE 'SO-'||t1.tranid END "PurchaseOrderNumber", t1.status, fp.list_item_name, t1.trandate "PurchaseOrderDate", DECODE(t1.transaction_type, 'Purchase Order', t1.cancel_date, NULL) "OrderCancelledDate",t1.transaction_type 'transactiontype',DECODE(t1.transaction_type, 'Purchase Order', '0', '1') 'IBTFlag', 'Placed' 'SupplierOrderStatus',DECODE(t1.transaction_type, 'Purchase Order', T1.due_date, NULL) "ReceiveNoEarlierThan",NULL "ReceiveNoLaterThan",DECODE(t1.transaction_type, 'Transfer Order', t2.transfer_order_item_line, t2.transaction_line_id) "PurchaseOrderLineNumber",t3.name 'SiteCode',CASE WHEN t4.related_asis_master_item_id IS NOT NULL AND t4.item_designation_id = (SELECT list_id FROM item_designation_values WHERE list_item_name = 'AS-IS INDIVIDUAL ITEM') THEN t6.name ELSE t4.name END "ItemCode",DECODE(t1.transaction_type, 'Sales Order', t2.shipdate, t2.expected_receipt_date) 'EstimatedReceiptDate',ABS(t2.item_count) 'OrderedQuantity', DECODE(t1.transaction_type, 'Sales Order', t4.AVERAGECOST, t2.ITEM_UNIT_PRICE) 'CostPerUnit', CASE WHEN t1.transaction_type = 'Purchase Order' AND transaction_lines.item_received ='No' AND (ABS(DATEDIFF(day,sysdate,expected_receipt_date)))<=14 THEN 'Pending' ELSE 'Placed' END 'OrderLineStatusIndicator',CASE WHEN t1.transaction_type = 'Purchase Order' THEN DECODE(NVL(SUBSTR(t2.SO_RESERVATION_,1,4),'0'), 0, vendors.name, to_char(vendors.name) || ':' || to_char(SUBSTR(t2.SO_RESERVATION_,1,4))) ELSE NULL END SupplierCode,  'USD' 'CurrencyCode', DECODE(t1.transaction_type, 'Purchase Order', NULL, t5.name) 'IBTSiteCode',DECODE(t1.transaction_type, 'Sales Order', ABS(t2.item_count), (t2.item_count - NVL(t2.quantity_received_in_shipment,0))) 'OutstandingQuantity' ,NULL 'CustomSupplierOrderStatusCode', NULL 'FreightMethod', NULL 'InternalModifiedReceiptDate',NULL 'SupplierModifiedReceiptDate', DECODE (  t1.transaction_type, 'Purchase Order', t1.due_date, NULL ) 'InitialReceiptDate' FROM transactions t1  LEFT OUTER JOIN vendors on transactions.entity_id=vendors.vendor_id  JOIN transaction_lines t2 ON t1.transaction_id = t2.transaction_id  JOIN items itm ON t2.item_id=itm.item_id  LEFT OUTER JOIN flowpath fp ON itm.flowpath_id=fp.list_id LEFT OUTER JOIN locations t3 ON (  DECODE  (   t1.transaction_type, 'Purchase Order',  NVL(t2.location_id, t1.location_id),  'Transfer Order', t1.transfer_location,  'Sales Order',  t1.location_id ) = t3.location_id ) JOIN items t4 ON t2.item_id = t4.item_id LEFT OUTER  JOIN LOCATIONS T5 ON (   DECODE   (  t1.transaction_type,  'Transfer Order',  t1.location_id,   'Sales Order',  t2.location_id  )  = t5.location_id)LEFT OUTER JOIN items t6 ON t4.related_asis_master_item_id = t6.item_id  LEFT OUTER JOIN SHIPPING_ITEMS t7 ON t1.shipping_item_id = t7.item_id

supplieroder.where.clause.netsuite= WHERE t1.transaction_type IN ('Purchase Order', 'Transfer Order', 'Sales Order') AND t2.item_id IS NOT NULL  AND t3.country IN (  SELECT  short_name  FROM countries WHERE name NOT IN ('Bermuda')  ) AND (( t1.transaction_type IN ('Purchase Order' , 'Transfer Order') AND(UPPER(t1.status) NOT LIKE '%APPROVAL%' AND UPPER(t1.status) NOT LIKE '%REJECTED%' AND UPPER(t1.status) NOT LIKE '%CANCELLED%' AND UPPER(t1.status) NOT LIKE '%CLOSED%' AND UPPER(t1.status) NOT LIKE '%RECEIVED%') AND (  t1.transaction_type = 'Purchase Order' OR  (    t1.transaction_type = 'Transfer Order'  AND t1.status <> 'Received'   AND ABS(t2.item_count) > 0  AND t4.TYPE_NAME = 'Inventory Item'   ) )  AND t2.item_received IS NOT NULL   AND (NVL(t2.item_count,'0') - NVL(t2.quantity_received_in_shipment,'0'))>0  ) OR  (   t1.transaction_type = 'Sales Order'  AND t1.status = 'Pending Fulfillment'  AND ABS(t2.item_count) > 0    AND t2.account_id IS NOT NULL    AND t4.TYPE_NAME = 'Inventory Item'    AND ( fp.list_item_name LIKE '%SHO RRC%'   OR  fp.list_item_name LIKE '%SHO DDC%'    OR  fp.list_item_name LIKE '%ORDC%')    AND UPPER(t7.name) NOT LIKE '%TO%'    ) ) AND t1.transaction_id BETWEEN \:startKey and \:endKey )
 
supplieroder.group.clause.netsuite=GROUP BY TransactionId,PurchaseOrderNumber,PurchaseOrderDate,OrderCancelledDate,transactiontype,IBTFlag,SupplierOrderStatus,ReceiveNoEarlierThan,ReceiveNoLaterThan,SiteCode,ItemCode,EstimatedReceiptDate,OrderLineStatusIndicator,CurrencyCode,IBTSiteCode,CustomSupplierOrderStatusCode,FreightMethod,InternalModifiedReceiptDate,IBTSiteCode,CustomSupplierOrderStatusCode,FreightMethod,InternalModifiedReceiptDate,SupplierModifiedReceiptDate,InitialReceiptDate,SupplierCode

supplieroder.sortKey.clause.netsuite=TransactionId
########################### Query to fetch vendor data from Netsuite ############################
itemhierarchyvendor.select.clause.netsuite=SELECT * 
itemhierarchyvendor.from.clause.netsuite= FROM ( SELECT rownum r, * from ( SELECT distinct(vendors.vendor_id) 'vendor_id' ,vendors.full_name,vendors.companyname FROM ITEMS,ITEM_VENDOR_MAP,VENDORS WHERE ITEMS.ITEM_ID \= ITEM_VENDOR_MAP.ITEM_ID AND VENDORS.VENDOR_ID \= ITEM_VENDOR_MAP.VENDOR_ID))
itemhierarchyvendor.where.clause.netsuite=where r >= :startKey and r <= :endKey
itemhierarchyvendor.sortKey.clause.netsuite=r
########################### Query to fetch static feed from Netsuite ############################
itemhierarchystatic.select.clause.netsuite=SELECT ID, NAME, MERCHANDISE_DESCRIPTION, className
itemhierarchystatic.from.clause.netsuite= from (SELECT CLASS_ID 'ID', CLASSES.full_name 'NAME', CLASSES.MERCHANDISE_DESCRIPTION 'MERCHANDISE_DESCRIPTION',CASE WHEN UPPER(MERCH_HIERARCHY_TYPES.LIST_ITEM_NAME) \= 'CATEGORY' THEN 'com.sho.renaissance.batch.domain.NetSuiteItemHierarchyMasterGroup1Feed' WHEN UPPER(MERCH_HIERARCHY_TYPES.LIST_ITEM_NAME) \= 'DIVISION' THEN 'com.sho.renaissance.batch.domain.NetSuiteItemHierarchyMasterGroup2Feed' WHEN UPPER(MERCH_HIERARCHY_TYPES.LIST_ITEM_NAME) \= 'LINE' THEN 'com.sho.renaissance.batch.domain.NetSuiteItemHierarchyMasterGroup3Feed' WHEN UPPER(MERCH_HIERARCHY_TYPES.LIST_ITEM_NAME) \= 'SUB-LINE' THEN 'com.sho.renaissance.batch.domain.NetSuiteItemHierarchyMasterGroup4Feed' WHEN UPPER(MERCH_HIERARCHY_TYPES.LIST_ITEM_NAME) \= 'CLASS' THEN 'com.sho.renaissance.batch.domain.NetSuiteItemHierarchyMasterGroup5Feed' END 'className'from CLASSES INNER JOIN MERCH_HIERARCHY_TYPES ON CLASSES.MERCH_HIERARCHY_TYPE_ID\=MERCH_HIERARCHY_TYPES.LIST_ID WHERE UPPER(MERCH_HIERARCHY_TYPES.LIST_ITEM_NAME)IN ('CATEGORY', 'DIVISION', 'LINE', 'SUB-LINE', 'CLASS'))
itemhierarchystatic.where.clause.netsuite= WHERE ID >= :startKey and ID <= :endKey
itemhierarchystatic.sortKey.clause.netsuite=ID
########################### Query to fetch item data from Netsuite ############################
itemhierarchyitem.select.clause.netsuite=SELECT *
itemhierarchyitem.from.clause.netsuite= from ( select rownum r, temp.* from (SELECT items.item_id, items.name, classes.full_name 'className', REGEXP_SUBSTR(classes.full_name, '[^\:]+',1,1) ItemMasterGroup1Code, REGEXP_SUBSTR(classes.full_name, '[^\:]+',1,2) ItemMasterGroup2Code, REGEXP_SUBSTR(classes.full_name, '[^\:]+',1,3) ItemMasterGroup3Code, REGEXP_SUBSTR(classes.full_name, '[^\:]+',1,4) ItemMasterGroup4Code, REGEXP_SUBSTR(classes.full_name, '[^\:]+',1,5) ItemMasterGroup5Code, vendors.full_name 'vendorName' FROM items LEFT OUTER JOIN item_vendor_map ON ITEMS.ITEM_ID \= ITEM_VENDOR_MAP.ITEM_ID LEFT OUTER JOIN vendors ON VENDORS.VENDOR_ID \= ITEM_VENDOR_MAP.VENDOR_ID LEFT OUTER JOIN classes ON classes.class_id \= items.class_id where items.item_id >\= 0 AND UPPER(ISINACTIVE) \= 'NO' )temp)
itemhierarchyitem.where.clause.netsuite= where r >= :startKey and r <= :endKey
itemhierarchyitem.sortKey.clause.netsuite=r
itemhierarchyitem.update.clause.process.stage=UPDATE batch_item SET sent_to_target =:sentToTarget, entity_type =:entityType where id =:id

########################### Query to fetch site attribute data from Netsuite ############################
siteattribute.select.clause.netsuite=SELECT t1.location_id, t1.name 'Site Code' ,t1.location_id 'Location ID',t2.full_name 'Sublocation Of', t1.location_desc 'Location Description',\
t3.full_name 'Sister Store', t4.full_name 'Franchisee/Dealer',t1.city 'Address - City', t1.state 'Address - State', t1.zipcode 'Address - Zip',\
t5.full_name 'Primary DDC', t6.full_name 'Primary RRC',t12.full_name 'Primary ORDC', t1.isinactive 'Inactive', t7.test_store 'Test Store', t7.comp_store 'Comp Store',\
t8.list_item_name 'Location Type', t9.list_item_name 'Store Type', t10.list_item_name 'Ownership Type',t1.RA__STORE_SIZE 'Store Size', t11.name 'Store Size Unit',\
t7.climate_zone 'Climate Zone',\
to_char(t7.open_date,'YYYY-MM-DD HH24:MI:SS')'Open Date', to_char(t7.comp_store_date,'YYYY-MM-DD HH24:MI:SS') 'Comp Store Date',\
to_char(t7.close_date,'YYYY-MM-DD HH24:MI:SS')'Close Date',to_char(t7.going_out_of_business_gob_dat,'YYYY-MM-DD HH24:MI:SS')'Going Out of Business (GOB) Date' , t7.close_date
siteattribute.from.clause.netsuite=from locations t1, locations t2, locations t3 , partners t4, locations t5, locations t6, location_details t7, location_types t8, store_types t9,\
ownership_type t10, uom t11,locations t12
siteattribute.where.clause.netsuite= where t1.parent_id = t2.location_id(+) and \
t1.sister_store_id = t3.location_id (+)and \
t1.franchisee__dealer_id = t4.partner_id(+) and \
t1.SHO_DDC_ID = t5.location_id(+) and \
t1.SHO_rrc_ID = t6.location_id(+) and \
t1.location_id = t7.location_id(+) and \
t1.location_type_id = t8.list_id(+) and \
t1.store_type_id = t9.list_id(+) and \
t1.ownership_type_id = t10.list_id(+) and \
t1.ra__store_size_unit_id = t11.uom_id(+)and \
t1.PRIMARY_ORDC_ID = t12.location_id(+)  and \
t1.location_id >= :startKey and t1.location_id <= :endKey
siteattribute.sortKey.clause.netsuite=location_id

##########################NetSuite Web Service Configuration #############################
netSuite.webService.userName=Webservices_Corp_SandBox_1@shos.com
netSuite.webService.password=Capgemini1
netSuite.webService.accountID=3721178
netSuite.webService.roleID=1000
netSuite.webService.applicationID=214473E9-FB2D-4679-8C02-49D5093C6D8F
netSuite.webService.connectionTimeout=10
netSuite.webService.receiveTimeout=60
netSuite.webService.endpointURL=https://webservices.sandbox.netsuite.com/services/NetSuitePort_2016_1
netSuite.webService.batchSize=200
netSuite.webService.currentVersion=2016_1
netSuite.webService.pageSize=20

####################################### ECOM ClusterFeed staging database queries #####################################
clusterfeed.temp_dataload_rpcm.insert.clause=INSERT into temp_dataload_rpcm_clusterfeed (location_name ,cluster_name ) values (:locationName, :clusterName )
clusterfeed.location.insert.clause=insert into temp_lookup_netsuite_location (location_id ,location_name ) values (:locationId,:locationName)
clusterfeed.cluster.insert.clause=insert into temp_lookup_netsuite_cluster (cluster_id ,cluster_name) values (:clusterId,:clusterName)
clusterfeed.enriched.update.clause=UPDATE temp_dataload_rpcm_clusterfeed_enriched set updated_in_netsuite = :updatedInNetsuite, last_modified  = :lastModified where id = :id

clusterfeed.select.clause.upload.ns=SELECT *
clusterfeed.from.clause.upload.ns=FROM temp_dataload_rpcm_clusterfeed_enriched
clusterfeed.where.clause.upload.ns=WHERE updated_in_netsuite = 0 AND location_id is not null AND id >= :startKey AND id <= :endKey
clusterfeed.sortKey.clause.upload.ns=id

clusterfeed.temp_dataload_rpcm_clusterfeed_enriched.failedrecords.query=select * from temp_dataload_rpcm_clusterfeed_enriched where  lookup_failure =  true or input_data_error = true
clusterfeed.temp_dataload_rpcm_clusterfeed_enriched.totalcount.query=select count(*) from temp_dataload_rpcm_clusterfeed_enriched 
####################################### ECOM ClusterFeed netsuite database queries  #####################################
clusterfeed.location.select.clause.netsuite=select location_id, name 
clusterfeed.location.from.clause.netsuite=locations 
clusterfeed.location.where.clause.netsuite=location_id >= :startKey and location_id <= :endKey
clusterfeed.location.sortKey.clause.netsuite=location_id
  
clusterfeed.cluster.select.clause.netsuite=select name, price_type_id 
clusterfeed.cluster.from.clause.netsuite=from price_types
clusterfeed.cluster.where.clause.netsuite=where name in ('Online Price','201','202','203','204','205') and price_type_id >= :startKey and price_type_id <= :endKey
clusterfeed.cluster.sortKey.clause.netsuite=price_type_id

####################################### Nightly Receipts #####################################
nightlyreceipts.sho.db.pageSize=100
nightlyreceipts.sho.db.fetchSize=100
nightlyreceipts.partition.gridsize=10
nightlyreceipts.commitInterval=100
nightlyreceipts.grid.size=10
nightlyreceipts.next.flow = process

########################### Query to insert data to localDB ##############################
storeinventory.insert.clause.ingest.stage=INSERT INTO $table (Process_Execution_Id,Item_Seq_Num,Status,Version,Payload_Ext_Ref_Id,Partition_Number,Current_payload,last_modified) values (:processExecutionId,:itemSeqNum,:status,1,:payloadExtRefId,:partitionNumber,:currentPayload,current_timestamp())
storeinventory.update.clause.process.stage=UPDATE $table set Process_Execution_Id = :processExecutionId , Item_Seq_Num = :itemSeqNum,Status = :status, Version = :version, Process_Flow_Key = :processFlowKey, Payload_Ext_Ref_Id = :payloadExtRefId, Current_Payload = :currentPayload, IEM_Payload = :IEMPayload, Current_ErrorMsg_Seq = :currentErrorMsgSeq,  Partition_Number = :partitionNumber, created = :created, last_modified = :lastModified WHERE Id = :id
storeinventory.insert.clause.process.stage=insert into $table (BATCH_ITEM_ID,ERRORMSG_SEQ,IEM_LEVEL,IEM_SEQUENCE,IS_ERROR,MESSAGE,created,last_modified) values(:batchItemId,:errorMsgSeq,:iemLevel,:iemSequence,:isError,:message,:created,:lastModified)
storeinventory.insert.clause.ingest.stage.new=INSERT INTO batch_item (correlation_id,item_xml_data,isValid,error_message,entity_type) values (:correlationId,:itemXMLData,:isValid,:errorMessage,:entityType)

insert.clause.storeinventory.netsuite= INSERT INTO temp_dataload_ns_onhandquantity (`location_id`, `location_name`, `item_id`, `item_name`, `shc_item_number`, `on_hand_quantity`, `bin_id`, `last_modified`) VALUES(\:locationId, \:locationName, \:itemId, \:itemName, \:shcItemNumber, \:onHandQuantity, \:binId, \:lastModified ) 
insert.clause.storeinventory.ecom= INSERT INTO `temp_dataload_ecomm_storeinventoryfeed` (`store_number`, `shc_div`, `shc_item`, `on_hand_quantity`, `last_modified`) VALUES (\:storeNumber, \:shcDiv, \:shcItem, \:onHandQuantity, \:lastModified);


########################################## Site parameters ##############################################






############################ Query for price feed ####################################################
pricefeed.insert.temp_dataload_prcm_pricefeed=INSERT INTO temp_dataload_prcm_pricefeed (cluster_name,ns_item_id,ns_item_id_name,shc_item_number,unique_id,regular_price, current_price,discount,map_violation_flag) values (:clusterName,:nsItemId,:nsItemIdName,:shcItemNumber,:uniqueId,:regularPrice,:currentPrice,:discount,:mapViolationFlag)
pricefeed.select.clause.netsuite=select temp.*
pricefeed.from.clause.netsuite=from (select rownum r, WEBSITE_ITEM_PRICING.PRICE_LEVEL_ID,WEBSITE_ITEM_PRICING.WEBSITE_ITEM_PRICING_ID 'ItemPricingInternalId', price_types.name 'priceTypes',items.SHC_ITEM_NUMBER,items.name,items.item_id,items.ISONLINE,WEBSITE_ITEM_PRICING.REGULAR_PRICE,WEBSITE_ITEM_PRICING.CURRENT_SELLING_PRICE,WEBSITE_ITEM_PRICING.PERCENT_DISCOUNT,WEBSITE_ITEM_PRICING.MAP_VIOLATION_FLAG from WEBSITE_ITEM_PRICING right outer join items on  WEBSITE_ITEM_PRICING.item_id \= items.item_id left outer join price_types on WEBSITE_ITEM_PRICING.PRICE_LEVEL_ID \= price_types.price_type_id LEFT OUTER JOIN item_designation_values ON (items.item_designation_id \= item_designation_values.list_id) where items.isinactive \= 'No' AND item_designation_values.list_item_name(+) \= 'NEW ITEM' AND price_types.name IN ('Online Price','201','202','203','204','205'))temp
pricefeed.where.clause.netsuite= where r >= :startKey and r <= :endKey
pricefeed.sortKey.clause.netsuite=r
insert.clause.priceFeed.netsuite= INSERT INTO temp_dataload_netsuite_pricefeed (cluster_id, cluster_name, item_id, item_name, regular_selling_price, current_selling_price, percent_discount, shc_item_number, map_violation_flag, website_item_pricing_id) values (:clusterId,:clusterName,:item,:itemName,:regularPrice,:currentPrice,:percentDiscount,:shcItem,:mapViolationFlag,:websiteItemPricingId)
pricefeed.lookup.select.clause.netsuite=select price_types.name, price_types.price_type_id
pricefeed.lookup.from.clause.netsuite= from price_types
pricefeed.lookup.where.clause.netsuite= where name in ('Online Price','201','202','203','204','205')
pricefeed.lookup.sortKey.clause.netsuite=name
insert.clause.priceFeed.lookup.netsuite= INSERT INTO temp_lookup_netsuite_cluster (cluster_id, cluster_name) values (:clusterId,:clusterName)

pricefeed.select.clause.upload.ns.delete=SELECT *
pricefeed.from.clause.upload.ns.delete=FROM temp_dataload_prcm_pricefeed_enriched
pricefeed.where.clause.upload.ns.delete=WHERE update_flag=1 and present_in_netsuite=1 and operation_type='D' and item_id is not null and id >= :startKey AND id <= :endKey
pricefeed.where.clause.upload.ns.delete.withoutrange=WHERE update_flag=1 and present_in_netsuite=1 and operation_type='D' and item_id is not null
pricefeed.sortKey.clause.upload.ns.delete=id

pricefeed.select.clause.upload.ns.add=SELECT *
pricefeed.from.clause.upload.ns.add=FROM temp_dataload_prcm_pricefeed_enriched
pricefeed.where.clause.upload.ns.add=WHERE update_flag=1 and present_in_netsuite=0 and operation_type='C' and item_id is not null and id >= :startKey AND id <= :endKey
pricefeed.where.clause.upload.ns.add.withoutrange=WHERE update_flag=1 and present_in_netsuite=0 and operation_type='C' and item_id is not null
pricefeed.sortKey.clause.upload.ns.add=id

pricefeed.select.clause.upload.ns.update=SELECT *
pricefeed.from.clause.upload.ns.update=FROM temp_dataload_prcm_pricefeed_enriched
pricefeed.where.clause.upload.ns.update=WHERE update_flag=1 and present_in_netsuite=1 and operation_type='U' and item_id is not null and id >= :startKey AND id <= :endKey
pricefeed.where.clause.upload.ns.online=WHERE update_flag=1 and present_in_netsuite=1 and operation_type='U' and item_id is not null and isonline_flag='F' and  id >= :startKey AND id <= :endKey
pricefeed.where.clause.upload.ns.update.withoutrange=WHERE update_flag=1 and present_in_netsuite=1 and operation_type='U' and item_id is not null
pricefeed.where.clause.upload.ns.online.withoutrange=WHERE update_flag=1 and present_in_netsuite=1 and operation_type='U' and item_id is not null and isonline_flag='F'
pricefeed.sortKey.clause.upload.ns.update=id

pricefeed.update.clause.data.stage=UPDATE temp_dataload_prcm_pricefeed_enriched set updated_in_netsuite = :updatedInNetsuite, last_modified = :lastModified where id = :id

############################### QUERY FOR CNV HISTORICAL METRICS ######################
cnvhistmetrics.insert.temp_dataload_shc_cnvhistoricalmetrics=INSERT INTO temp_dataload_shc_cnvhistoricalmetrics (WK_END_DAY_NBR,LOCN_NBR,PRD_IRL_NO,DIV_NO,ITM_NO,SKU_NO,INV_ADJ_TYP_CD,ITM_PRG_DT,INV_ADJ_UN_QT,INV_ADJ_CST_DLR,INV_ADJ_SLL_DLR) values (:historyDate,:siteCode,:prdIrlNo,:divNo,:itmNo,:skuNo,:invAdjTypeCode,:itmprgdt,:invAdjUnitsQty,:invAdjCostDollar,:invAdjSllDollar)

cnvhistmetrics.updateEnrich.clause= UPDATE temp_dataload_shc_cnvhistoricalmetrics_enriched SET sent_to_je =:sentToJE where id =:id

cnvhistmetrics.select.clause= select * 
cnvhistmetrics.from.clause= from temp_dataload_shc_cnvhistoricalmetrics_enriched  
cnvhistmetrics.where.clause= where sent_to_je=0 and id >= :startKey and id <= :endKey 
cnvhistmetrics.sortKey.clause= id

cnvhistmetrics.insert.clause.je=insert into ctbl_Import_HistoricMetrics (SiteCode,ItemCode,InventoryAdjustmentShrinkUnits,InventoryAdjustmentShrinkCostDollars,InventoryAdjustmentDamagedUnits,InventoryAdjustmentDamagedCostDollars,HistoryDate) values (:siteCode,:itemCode,:inventoryAdjustmentShrinkUnits,:inventoryAdjustmentShrinkCostDollars,:inventoryAdjustmentDamagedUnits,:inventoryAdjustmentDamagesCostDollars,:historyDate) 

############################### ITEM DESCRIPTIVE ATTRIBUTES ######################
itemdescriptiveattributes.temp.tableName=temp_dataload_ecomm_spindescattribute
itemdescriptiveattributes.insert.temp_dataload_prcm_itemdescriptiveattributes=INSERT INTO temp_dataload_ecomm_spindescattribute (ns_item_id,ns_item_id_name,attribute_group_display_name,attribute_name,attribute_value,ranking,row_id) values (:NSITemId,:NSItemIdName,:groupName,:name,:attributeValue,:rank,:rowId)

itemdescriptiveattributes.select.clause.upload.ns.add=SELECT *
itemdescriptiveattributes.from.clause.upload.ns.add=FROM temp_dataload_netsuite_spindescattribute_enriched
itemdescriptiveattributes.where.clause.upload.ns.add=WHERE id >= :startKey and id <= :endKey
itemdescriptiveattributes.sortKey.clause.upload.ns.add=id

itemdescriptiveattributes.update.clause.data.stage=UPDATE temp_dataload_netsuite_spindescattribute_enriched set updated_in_netsuite = :updatedInNetsuite, last_modified = :lastModified where id = :id
itemdescriptiveattributeswriter.enrichedTableName=temp_dataload_netsuite_spindescattribute_enriched

itemdescriptiveattributes.partition.gridsize=5
itemdescriptiveattributes.commitInterval=100
############################ Query for Spin Assets ####################################################
spinassets.insert.temp_dataload_ecomm_spinassets=INSERT INTO temp_dataload_ecomm_spinassets (ns_item_id,ns_item_id_name,asset_group,asset_info,asset_rank,row_id) values (:nsItemId,:nsItemName,:assetsGroup,:assetsInfo,:assetsRank,:rowId);
spinassets.select.clause.upload.ns=SELECT *
spinassets.from.clause.upload.ns=FROM temp_dataload_netsuite_spinassets_enriched
spinassets.where.clause.upload.ns=WHERE row_id >= :startKey AND row_id <= :endKey
spinassets.sortKey.clause.upload.ns=row_id
spinassets.update.clause.data.stage=UPDATE temp_dataload_netsuite_spinassets_enriched set updated_in_netsuite = :updatedInNetSuite, last_modified = :lastModified where row_id=:rowId

############################ Query for Spin Item ####################################################
spinitem.insert.temp_dataload_ecomm_spinitem=INSERT INTO temp_dataload_ecomm_spinitem (ns_item_id,division_nbr,item_nbr,outlet_item_id,shc_div_item_number,model_number,spin_unique_id,upc,brand_name,item_name,item_name_full,brand_model_item_name,brand_model_item_name_full, \
url_component,short_description,long_description,search_keywords,shipping_length,shipping_height,shipping_weight,shipping_width,delivery_available_flag,shipping_available_flag, \
map_rule_id,map_text,map_description,list_price,average_rating,facet_width,facet_height,facet_depth,facet_weight,facet_capacity,facet_color,facet_highEfficiency, \
facet_energyStarCompliant,facet_warrantyLength,facet_material,facet_rangeStyle,facet_cookingSurface,facet_numberOfBurners,facet_numberOfOvens,facet_ovenType, \
facet_venting,facet_exhaustMethod,facet_fuelType,facet_convectionCooking,facet_defrostSystem,facet_iceMaker,facet_builtIn,facet_washCycles,facet_dryCycles, \
facet_controlLocation,facet_dryerInteriorSize,facet_dryerPowerSource,facet_tubMaterial,facet_comfort,facet_mattressTop,facet_standardOrCounterdepth,facet_features, \
energy_guide_url,facet_wattageRange,facet_thrudoordispenser,facet_collection,facet_upholsteryType) values (:nsItemId,:divisionNbr,:itemNbr,:outletItemId,:shcDivItemNumber,:modelNumber,:spinUniqueId,:upc,:brandName,:itemName,:itemNameFull,:brandModelItemName,:brandModelItemNameFull,\
:urlComponent,:shortDescription,:longDescription,:searchKeywords,:shippingLength,:shippingHeight,:shippingWeight,:shippingWidth,:deliveryAvailableFlag,:shippingAvailableFlag, \
:mapRuleId,:mapText,:mapDescription,:listPrice,:averageRating,:facetWidth,:facetHeight,:facetDepth,:facetWeight,:facetCapacity,:facetColor,:facetHighEfficiency, \
:facetEnergyStarComplian,:facetWarrantyLength,:facetMaterial,:facetRangeStyle,:facetCookingSurface,:facetNumberOfBurners,:facetNumberOfOvens,:facetOvenType, \
:facetVenting,:facetExhaustMethod,:facetFuelType,:facetConvectionCooking,:facetDefrostSystem,:facetIceMaker,:facetBuiltIn,:facetWashCycles,:facetDryCycles, \
:facetControlLocation,:facetDryerInteriorSize,:facetDryerPowerSource,:facetTubMaterial,:facetComfort,:facetMattressTop,:facetStandardOrCounterdepth,:facetFeatures, \
:energyGuideUrl,:facetWattageRange,:facetThrudoordispenser,:facetCollection,:facetUpholsteryType);
spinitem.select.clause.upload.ns=SELECT *
spinitem.from.clause.upload.ns=FROM temp_dataload_netsuite_spinitem_enriched
spinitem.where.clause.upload.ns=WHERE id >= :startKey AND id <= :endKey
spinitem.sortKey.clause.upload.ns=id
spinitem.update.clause.data.stage=UPDATE temp_dataload_netsuite_spinitem_enriched set updated_in_netsuite = :updatedInNetSuite, last_modified = :lastModified where id=:id

############################ Query for Related Items ####################################################
#relateditems.select.clause.upload.ns.add=SELECT *
#relateditems.from.clause.upload.ns.add=from temp_dataload_netsuite_spinrelateditems_enriched
#relateditems.where.clause.upload.ns.add=WHERE updated_in_netsuite=0 and action=(select action_id from temp_lookup_netsuite_action where action = 'Create') and id >= :startKey AND id <= :endKey
#relateditems.where.clause.upload.ns.add.withoutrange=WHERE updated_in_netsuite=0 and action=(select action_id from temp_lookup_netsuite_action where action = 'Create')
#relateditems.sortKey.clause.upload.ns.add=id

#relateditems.select.clause.upload.ns.delete=SELECT *
#relateditems.from.clause.upload.ns.delete=from temp_dataload_netsuite_spinrelateditems_enriched
#relateditems.where.clause.upload.ns.delete=WHERE updated_in_netsuite=0 and action=(select action_id from temp_lookup_netsuite_action where action = 'Delete') and id >= :startKey AND id <= :endKey
#relateditems.where.clause.upload.ns.delete.withoutrange=WHERE updated_in_netsuite=0 and action=(select action_id from temp_lookup_netsuite_action where action = 'Delete')
#relateditems.sortKey.clause.upload.ns.delete=id

#relateditems.enriched.update.clause=UPDATE temp_dataload_netsuite_spinrelateditems_enriched set updated_in_netsuite = :updatedInNetsuite where id = :id
####################################### ECOM Related Items Temp table query #####################################
#relateditems.temp_dataload_ecomm_spinrelateditems.insert.clause=INSERT into temp_dataload_ecomm_spinrelateditems (ns_item_id, linked_ns_item_id,sourcekey) values (:nsItemId, :linkedNsItemId,:sourceKey)

############################ Query for Spin Images ####################################################
spinimages.insert.temp_dataload_ecomm_spinimages=INSERT INTO temp_dataload_ecomm_spinimages (ns_item_id,ns_item_id_name,image_url,rank,row_id) values (:nsItemId,:nsItemIdName,:imageUrl,:rank,:rowId);
spinimages.select.clause.upload.ns=SELECT *
spinimages.from.clause.upload.ns=FROM temp_dataload_netsuite_spinimages_enriched
spinimages.where.clause.upload.ns=WHERE row_id >= :startKey AND row_id <= :endKey
spinimages.sortKey.clause.upload.ns=row_id
spinimages.update.clause.data.stage=UPDATE temp_dataload_netsuite_spinimages_enriched set updated_in_netsuite = :updatedInNetSuite, last_modified = :lastModified where row_id=:rowId

####################################### ECOM Site Categories Temp table queries ###################################
sitecategories.temp_dataload_ecomm.insert.clause=insert into temp_dataload_ecomm_sitecategories (ns_item_id ,ns_site_name ,ns_hierarchy_details ,sourcekey ) values (:nsItemId,:nsSiteName,:nsHierarchyDetails,:sourcekey);
sitecategories.enriched.update.clause=UPDATE temp_dataload_netsuite_sitecategories_enriched set updated_in_netsuite  = :updatedInNetsuite where id = :id
sitecategories.next.flow=UploadToNetSuite

sitecategories.select.clause.ns=select *
sitecategories.from.clause.ns=FROM temp_dataload_netsuite_sitecategories_enriched 
sitecategories.where.clause.ns=WHERE updated_in_netsuite = 0 and id >= :startKey and id <= :endKey
sitecategories.sortKey.clause.ns=id

sitecategories.sho.db.pageSize=50
sitecategories.sho.db.fetchSize=50
sitecategories.partition.gridsize=10
sitecategories.commitInterval=100
sitecategories.grid.size=4
sitecategories.dataload.commit.interval = 50
sitecategories.file.delimiter=|
sitecategories.file.linesToSkip=1
sitecategorieswriter.enrichedTableName=temp_dataload_netsuite_sitecategories_enriched
#################################### ECOM Store inv feed queries####################################################
####################################### ECOM Store inv Feed Temp table queries #####################################
storeinvfeed.select.clause.upload.ns=Select * from (SELECT @rownum:=@rownum + 1 as r, t.* 
storeinvfeed.from.clause.upload.ns=FROM ( SELECT * FROM temp_dataload_ns_onhandquantity_enriched where operation_type in('U')) t, (SELECT @rownum := 0) r)temp
storeinvfeed.where.clause.upload.ns=where r >= :startKey AND r <= :endKey
storeinvfeed.sortKey.clause.upload.ns=r

storeinvfeed.select.clause.create.ns=Select * from (SELECT @rownum:=@rownum + 1 as r, t.* 
storeinvfeed.from.clause.create.ns=FROM (SELECT * FROM temp_dataload_ns_onhandquantity_enriched where operation_type in('C') ) t, (SELECT @rownum := 0) r)temp 
storeinvfeed.where.clause.create.ns=where  r >= :startKey AND r <= :endKey
storeinvfeed.sortKey.clause.create.ns=r

storeinvfeed.enriched.update.clause=update temp_dataload_ns_onhandquantity_enriched set updated_in_netsuite = :updateInNetsuite, last_modified = :lastModified where location_name = :locationName and shc_item_number = :shcItemNumber


insert.clause.storeinventoryfeed.netsuite= INSERT INTO temp_dataload_ns_onhandquantity (`location_id`, `location_name`, `item_id`, `item_name`, `shc_item_number`, `website_threshold_quantity`, `website_available_inventory`,`on_hand_quantity`, `item_location_attribute_id`, `last_modified`) VALUES(\:locationId, \:locationName, \:itemId, \:itemName, \:shcItemNumber, \:websiteThresholdQuantity, \:websiteAvialableInventory,  \:onHandQuantity, \:customRecordId, \:lastModified) 
insert.clause.storeinventoryfeed.ecom = INSERT INTO `temp_dataload_ecomm_storeinventoryfeed` (`store_number`, `shc_div`, `shc_item`, `on_hand_quantity`, `last_modified`) VALUES (\:storeNumber, \:shcDiv, \:shcItem, \:onHandQuantity, \:lastModified);

#############################@@ STORE INVENTORY QUERIES- used  in INGEST job @@ ############################
storeinventory.select.clause.netsuite=select *
storeinventory.from.clause.netsuite=(select temp.*,rownum r from (SELECT items.shc_item_number, \
       items.item_id 'Item Id', \
	   items.name 'Item Name' , \
       locations.name 'name' , \
       t4.location_id 'Location Id', \
       t4.WEBSITE_AVAILABLE_INVENTORY 'Website Available Inventory', \
       NVL2(t4.WEBSITE_THRESHOLD_QUANTITY,t4.WEBSITE_THRESHOLD_QUANTITY,0)'Website Threashold Quantity', \
       t4.ITEM__LOCATION_LEVEL_ATTRIB_ID 'Item/Loc Custom Record Id' \
   FROM items \
       LEFT OUTER JOIN item_designation_values \
       ON (items.item_designation_id = item_designation_values.list_id) \
       JOIN ITEM__LOCATION_LEVEL_ATTRIBUT t4 \
       on items.item_id = t4.item_id \
       LEFT OUTER JOIN Locations \
       ON t4.location_id = Locations.LOCATION_ID \
       LEFT OUTER JOIN store_types \
       ON (locations.store_type_id = store_types.list_id) \
WHERE  items.isinactive = 'No' and t4.IS_INACTIVE = 'F' \
   AND item_designation_values.list_item_name(+) = 'NEW ITEM' \
   AND store_types.list_item_name IN ('AHS', 'HAS', 'HTS') \
   	   )temp)

storeinventory.where.clause.netsuite=where r >= :startKey and r <= :endKey
storeinventory.sortKey.clause.netsuite=r


################################## [  Inventory cost INGEST] #########################################
########################### Query to fetch data from Netsuite ############################
inventorycost.select.clause.netsuite=SELECT * 
inventorycost.from.clause.netsuite=(select rownum r,temp.* FROM (SELECT ItemCode,SiteCode,AVG(AverageCost) FROM \
(SELECT CASE WHEN items.RELATED_ASIS_MASTER_ITEM_ID IS NOT NULL \
        AND idv.list_item_name = 'AS-IS INDIVIDUAL ITEM'  THEN   (select name from items where  item_id = items.related_asis_master_item_id) \
         ELSE   items.name  END "ItemCode", t2.name 'SiteCode',  t2.LOCATION_TYPE_ID, \
items.name,  \
bin_number.bin_number, \
CASE WHEN idv.list_item_name = 'AS-IS MASTER ITEM' \
                 THEN 0 \
               ELSE \
           CASE WHEN NVL(t1.average_cost ,0) = 0 THEN \
                  0 \
                ELSE \
                 t1.average_cost \
           END \
           END 'AverageCost' \
FROM \
items JOIN item_location_map t1  \
ON items.item_id = t1.item_id \
LEFT OUTER JOIN item_designation_values idv ON  idv.list_id = items.item_designation_id AND idv.list_item_name IN ('AS-IS INDIVIDUAL ITEM','NEW ITEM','AS-IS MASTER ITEM') \
JOIN locations t2 \
ON t1.location_id = t2.location_id \
LEFT OUTER JOIN bin_number \
ON t1.location_id = bin_number.location_id AND t1.item_id = bin_number.item_id  \
WHERE average_cost is not null and \
items.type_name in ('Inventory Item','Gift Certificate') \
and \
t2.LOCATION_TYPE_ID in (select list_id from LOCATION_TYPES where list_item_name in ('Retail')) \
and bin_number.bin_number like  '%Saleable%' \
) \
GROUP BY ItemCode,SiteCode) temp )

inventorycost.where.clause.netsuite=  where r >= :startKey and r <= :endKey
inventorycost.sortKey.clause.netsuite=r

inventorycost.insert.clause.ingest.stage.new=INSERT INTO batch_item (correlation_id,item_xml_data,isValid,error_message,entity_type) values (:correlationId,:itemXMLData,:isValid,:errorMessage,:entityType)
inventorycost.insert.clause.je=INSERT INTO tbl_Import_Inventory_Cost (ItemCode,SiteCode,Cost,CurrencyCode,StartDate,EndDate,CostTypeName) values (:itemCode,:siteCode,:cost,:costCurrencyCode,:startDate,:endDate,:costCurrencyCode)
########################################################################################################################
################################## [ Historical Metrics INGEST] #########################################
########################### Query to fetch data from Netsuite ############################
historicalmetrics.select.clause.netsuite=SELECT * FROM (select rownum r, temp.* 

historicalmetrics.from.clause.netsuite=from (SELECT ItemCode, SiteCode, \
       SUM(InvenAdjustDamagUnits) InventAdjDamagedUnits, \
       SUM(InvenAdjustShrinkUnits) InventAdjShrinkUnits, \
       SUM(InvenAdjustDamagDollars) InventAdjDamagedCostDollars, \
       SUM(InvenAdjustShrinkDollars) InventAdjShrinkCostDollars \
  FROM \
  ( SELECT \
           t1.itemcode, \
         locations.name SiteCode, \
         CASE \
            WHEN reason_code.reason_code_name IN ('As-Is Item Creation', 'Damage', 'Non-Saleable - Vendor', 'Non-Saleable Junk') \
               THEN \
                  transaction_lines.item_count \
           ELSE 0 \
         END InvenAdjustDamagUnits, \
         CASE \
            WHEN reason_code.reason_code_name IN ('Cycle Count', 'Out of Stock', 'Physical Inventory Adjustment', 'Theft') \
               THEN \
                  transaction_lines.item_count \
            WHEN reason_code.reason_code_name = 'Extra Merchandise' \
               THEN \
                  -(transaction_lines.item_count) \
           ELSE 0 \
         END InvenAdjustShrinkUnits, \
         CASE \
            WHEN reason_code.reason_code_name IN ('As-Is Item Creation', 'Damage', 'Non-Saleable - Vendor', 'Non-Saleable Junk') \
               THEN \
                  transaction_lines.gross_amount \
           ELSE 0 \
         END InvenAdjustDamagDollars, \
         CASE \
            WHEN reason_code.reason_code_name IN ('Cycle Count', 'Out of Stock', 'Physical Inventory Adjustment', 'Theft') \
               THEN \
                  transaction_lines.gross_amount \
            WHEN reason_code.reason_code_name = 'Extra Merchandise' \
               THEN \
                  -(transaction_lines.gross_amount) \
           ELSE 0 \
         END InvenAdjustShrinkDollars \
    FROM transactions JOIN transaction_lines ON transactions.transaction_id = transaction_lines.transaction_id \
         JOIN locations ON transactions.location_id = locations.location_id \
        JOIN ( SELECT i.item_id, CASE WHEN i.related_asis_master_item_id IS NOT NULL AND idv.list_id IS NOT NULL THEN  (SELECT name from items where item_id = i.related_asis_master_item_id ) \
              ELSE \
               i.name \
         END 'itemcode' \
         from  items i LEFT OUTER JOIN item_designation_values idv ON  idv.list_id = i.item_designation_id AND idv.list_item_name IN ('AS-IS INDIVIDUAL ITEM')) \
  t1 ON transaction_lines.item_id = t1.item_id \
        JOIN reason_code ON transactions.reason_code_id = reason_code.reason_code_id \
         WHERE transactions.transaction_type = 'Inventory Adjustment' \
      AND transaction_lines.item_id IS NOT NULL \
      AND transaction_lines.item_count <> 0 \
   ) \
GROUP BY ItemCode, SiteCode) temp)
           
historicalmetrics.where.clause.netsuite= where r >= :startKey and r <= :endKey
historicalmetrics.sortKey.clause.netsuite=r

historicalmetrics.insert.clause.je=insert into ctbl_Import_HistoricMetrics(ItemCode, SiteCode, HistoryDate, InventoryAdjustmentDamagedUnits, InventoryAdjustmentShrinkUnits, InventoryAdjustmentDamagedCostDollars, InventoryAdjustmentShrinkCostDollars) values (:itemCode,:siteCode,:historyDate,:inventoryAdjustmentDamagedUnits,:inventoryAdjustmentShrinkUnits,:inventoryAdjustmentDamagedCostDollars,:inventoryAdjustmentShrinkCostDollars)

############################ Query for Parts and Accessories ####################################################
partsaccessories.select.clause.upload.ns.add=SELECT *
partsaccessories.from.clause.upload.ns.add=from temp_dataload_netsuite_spinpartsaccessories_enriched
partsaccessories.where.clause.upload.ns.add=WHERE updated_in_netsuite=0 and action=(select action_id from temp_lookup_netsuite_action where action = 'Create') and id >= :startKey AND id <= :endKey
partsaccessories.where.clause.upload.ns.add.withoutrange=WHERE updated_in_netsuite=0 and action=(select action_id from temp_lookup_netsuite_action where action = 'Create')
partsaccessories.sortKey.clause.upload.ns.add=id

partsaccessories.select.clause.upload.ns.delete=SELECT *
partsaccessories.from.clause.upload.ns.delete=from temp_dataload_netsuite_spinpartsaccessories_enriched
partsaccessories.where.clause.upload.ns.delete=WHERE updated_in_netsuite=0 and action=(select action_id from temp_lookup_netsuite_action where action = 'Delete') and id >= :startKey AND id <= :endKey
partsaccessories.where.clause.upload.ns.delete.withoutrange=WHERE updated_in_netsuite=0 and action=(select action_id from temp_lookup_netsuite_action where action = 'Delete')
partsaccessories.sortKey.clause.upload.ns.delete=id

partsaccessories.enriched.update.clause=UPDATE temp_dataload_netsuite_spinpartsaccessories_enriched set updated_in_netsuite = :updatedInNetsuite where id = :id
####################################### ECOM Parts and Accessories Temp table query #####################################
partsaccessories.temp_dataload_ecomm_spinpartsaccessories.insert.clause=INSERT into temp_dataload_ecomm_spinpartsaccessories (ns_item_id, linked_ns_item_id,sourcekey) values (:nsItemId, :linkedNsItemId,:sourceKey)


############################ Query for Protection Agreements ####################################################
protectionagreements.select.clause.upload.ns.add=SELECT *
protectionagreements.from.clause.upload.ns.add=from temp_dataload_netsuite_spinprotectionagreement_enriched
protectionagreements.where.clause.upload.ns.add=WHERE updated_in_netsuite=0 and action=(select action_id from temp_lookup_netsuite_action where action = 'Create') and id >= :startKey AND id <= :endKey
protectionagreements.where.clause.upload.ns.add.withoutrange=WHERE updated_in_netsuite=0 and action=(select action_id from temp_lookup_netsuite_action where action = 'Create')
protectionagreements.sortKey.clause.upload.ns.add=id

protectionagreements.select.clause.upload.ns.delete=SELECT *
protectionagreements.from.clause.upload.ns.delete=from temp_dataload_netsuite_spinprotectionagreement_enriched
protectionagreements.where.clause.upload.ns.delete=WHERE updated_in_netsuite=0 and action=(select action_id from temp_lookup_netsuite_action where action = 'Delete') and id >= :startKey AND id <= :endKey
protectionagreements.where.clause.upload.ns.delete.withoutrange=WHERE updated_in_netsuite=0 and action=(select action_id from temp_lookup_netsuite_action where action = 'Delete')
protectionagreements.sortKey.clause.upload.ns.delete=id

protectionagreements.enriched.update.clause=UPDATE temp_dataload_netsuite_spinprotectionagreement_enriched set updated_in_netsuite = :updatedInNetsuite where id = :id
####################################### ECOM Protection Agreements Temp table query #####################################
protectionagreements.temp_dataload_ecomm_spinprotectionagreement.insert.clause=INSERT into temp_dataload_ecomm_spinprotectionagreement (ns_item_id, pa_ns_item_id,sourcekey) values (:nsItemId, :paNsItemId,:sourceKey)

############################ Query for po and transfers  ####################################################
poAndTransfers.lookup.select.clause.netsuite= select PO_OR_TRANSFER_LIST.list_id,PO_OR_TRANSFER_LIST.list_item_name
poAndTransfers.lookup.from.clause.netsuite= from PO_OR_TRANSFER_LIST
poAndTransfers.lookup.sortKey.clause.netsuite= list_id
poAndTransfers.select.clause.netsuite=select JEOrderHeaderID, JEOrderLineNumber, ItemNumber, LocationFrom, VendorName, LocationTo, Quantity, OrderDate, ExpectedReceiptDate, \
POvsTransferFlag, OriginalPONumber, CostPrice
poAndTransfers.from.clause.netsuite= from ctbl_PO_Load_Temp 
poAndTransfers.where.clause.netsuite= where JEOrderLineNumber >= :startKey AND JEOrderLineNumber <= :endKey
poAndTransfers.sortKey.clause.netsuite=JEOrderLineNumber
poAndTransfers.listValues.insert.clause=insert into temp_lookup_netsuite_poAndTransfers (list_id ,list_PurchaseOrder ) values (:listId,:isPurchaseOrder)

############################ Query for Conv InventoryOnHand ####################################################


inventoryonhand.rim.temp.truncate=TRUNCATE merch_cnvinventoryonhand_dataload_rim
inventoryonhand.loc.temp.truncate=TRUNCATE merch_cnvinventoryonhand_dataload_location
invntonhand.insert.temp_loc_dataload_invntonhand=insert into merch_cnvinventoryonhand_dataload_location (pos,eis) values (:pos,:eis);
invntonhand.insert.temp_rim_dataload_invntonhand=insert into merch_cnvinventoryonhand_dataload_rim (store_nbr,division_nbr,item_nbr,sku_nbr,on_hand_qty) values (:storeNbr,:divisionNbr,:itemNbr,:skuNbr,:onHandQty);
invntonhand.select.clause.upload.ns=SELECT *
invntonhand.from.clause.upload.ns=FROM merch_cnvinventoryonhand_dataload_enriched_positive
invntonhand.where.clause.upload.ns=WHERE id >= :startKey AND id <= :endKey
invntonhand.sortKey.clause.upload.ns=id
invntonhand.update.clause.data.stage=UPDATE merch_cnvinventoryonhand_dataload_enriched_positive set updated_in_netsuite = :updatedInNetsuite where id=:Id

############################ Query for INT046- conversion sales history  ####################################################
cnvsaleshistory.insert.temp_dataload_shc_cnvsaleshistory=INSERT INTO temp_dataload_shc_cnvsaleshistory (wk_end_day_nbr,locn_nbr,prd_irl_no,div_no,itm_no,sku_no,sls_typ_cd,trs_typ_cd,mds_sts,itm_prg_dt,sls_un_qty,sls_cst_dlr,sls_sll_dlr ) values (:wkEndDayNbr,:locNbr,:prdIrlNo,:divNo,:itemNo,:skuNo,:slsTypCd,:trsTypCd,:mdsSts,:itemPrgDt,:slsUnQty,:slsCstDlr,:slsSllDlr)
cvnsaleshistory.select.clause.je=SELECT *
cvnsaleshistory.from.clause.je=FROM temp_dataload_shc_cnvsaleshistory_enriched
cvnsaleshistory.where.clause.je=WHERE sent_to_je=0 and id >= :startKey AND id <= :endKey
cvnsaleshistory.sortKey.clause.je=id
cvnsaleshistory.insert.clause.je=INSERT INTO tbl_API_Import_SalesHistory_ByType (ItemCode,SiteCode,SalesTypeCode,ReturnFlag,SalesDate,SalesQuantity,SeasonCode,TotalCost,TotalRevenue,TotalOriginalRetail,AuditReceipt,BatchID) values (:itemCode,:siteCode,:salesTypeCode,:returnFlag,:salesDate,:salesQty,:seasonCode,:totalCost,:totalRevenue,:totalRetail,:auditReceipt,:batchID);
cvnsaleshistory.update.clause.process=UPDATE temp_dataload_shc_cnvsaleshistory_enriched SET sent_to_je =:sentToJE where id =:id

############################ Query for POS_CNV-089_InvoiceInfo ####################################################
cnvinvoiceinfo.insert.pos_cnvinvoiceinfo_dataload=INSERT INTO pos_cnvinvoiceinfo_dataload (sho_customer_id,shc_customer_identifier,shc_invoice_number,shc_sales_check_number,shc_transaction_date,	\
shc_transaction_time,syw_member_id,syw_points_redeemed,syw_points_earned,external_id,store_number,department,total_amount,total_tax,discount_item,	\
associate_discount,transaction_discount,memo,shipping_address_line1,shipping_address_line2,shipping_city,shipping_state,shipping_zip,billing_address_type,	\
billing_addr_line1,billing_addr_line2,billing_city,billing_state,billing_zip,shc_item_number,plus4,sequence_id,quantity,regular_price,plu_price,selling_price,	\
tax_code,tax_rate,tax_amount,return_allowed,isvalid,source,correlationid) values (:shoCustomerID,:shcCustomerIdentifier,:shcInvoiceNumber,:salesCheckNumber,	\
:shctranDate,:shcTranTime,:sywMemberID,:sywPointsRedeemed,:sywPointsEarned,:externalID,:locationNumber,:department,:totalAmount,:totalTax,:discountItem,	\
:associateDiscount,:transactionDiscount,:memo,:address1,:address2,:city,:state,:zip,:billingAddressType,:billingAddress1,:billingAddress2,:billingCity,	\
:billingState,:billingZipCode,:shcItemNumber,:plus4,:sequenceId,:quantity,:regularPrice,:pluPrice,:sellingPrice,:taxcode,:taxrate,:taxAmount,:returnAllowed,	\
:isvalid,:source,:correlationId)

cnvinvoiceinfo.locations.lookup.select.clause.netsuite= select location_id,name
cnvinvoiceinfo.locations.lookup.from.clause.netsuite= from locations
cnvinvoiceinfo.locations.lookup.sortKey.clause.netsuite= location_id
cnvinvoiceinfo.insert.pos_cnvinvoiceinfo_locations_lookup=INSERT INTO pos_cnvinvoiceinfo_locations_lookup(location_internal_id,location_name) values (:locationId,:locationName)

cnvinvoiceinfo.items.lookup.select.clause.netsuite= select item_id,name
cnvinvoiceinfo.items.lookup.from.clause.netsuite= from items
cnvinvoiceinfo.items.lookup.sortKey.clause.netsuite= item_id
cnvinvoiceinfo.insert.pos_cnvinvoiceinfo_items_lookup= INSERT INTO pos_cnvinvoiceinfo_items_lookup(item_internal_id,item_name) values (:itemId,:itemName)

cnvinvoiceinfo.enriched.select.clause.upload.ns=Select * from (SELECT @rownum:=@rownum + 1 as r, t.* 
cnvinvoiceinfo.enrichedUpdate.from.clause.upload.ns=FROM ( SELECT * FROM pos_cnvinvoiceinfo_enrich where operation_type in('U')) t, (SELECT @rownum := 0) r)temp
cnvinvoiceinfo.enriched.where.clause.upload.ns=where correlation_id =:correlationId AND r >= :startKey AND r <= :endKey
cnvinvoiceinfo.enriched.sortKey.clause.upload.ns=r

#######################################CNV Cust Info#################################################
###########################Query to fetch data from netsuite###################
cnvCustInfo.lookup.select.clause.netsuite=SELECT * FROM (select rownum r, temp.*
cnvCustInfo.lookup.from.clause.netsuite=FROM (select customers.CUSTOMER_ID,customers.SHC_CUSTOMER_IDENTIFIER,customers.IS_PERSON,customers.FIRSTNAME, \
customers.MIDDLENAME,customers.LASTNAME, customers.COMPANYNAME,CUSTOMER_TYPES.name'CATEGORY NAME', \
CUSTOMER_TYPES.customer_type_id'CATEGORY ID',customers.COMMENTS,customers.EMAIL, \
customers.PHONE,subsidiaries.name'SUBSIDIARY NAME',subsidiaries.SUBSIDIARY_ID'SUBSIDIARY ID', \
customers.URL,ad1.ADDRESS_LINE_1'BILL_ADDRESS_LINE_1',ad1.ADDRESS_LINE_2'BILL_ADDRESS_LINE_2',ad1.IS_DEFAULT_BILL_ADDRESS, \
ad1.CITY'BILL_CITY',ad1.STATE'BILL_STATE',ad1.ZIP'BILL_ZIP',ad2.ADDRESS_LINE_1'SHIP_ADDRESS_LINE_1',ad2.ADDRESS_LINE_2'SHIP_ADDRESS_LINE_2', \
ad2.IS_DEFAULT_SHIP_ADDRESS,ad2.CITY'SHIP_CITY',ad2.STATE'SHIP_STATE',ad2.ZIP'SHIP_ZIP' \
from customers \
LEFT OUTER JOIN address_book ad1 \
on ad1.ENTITY_ID = customers.CUSTOMER_ID \
LEFT OUTER JOIN  address_book ad2 \
on ad1.entity_id = ad2.entity_id \
LEFT OUTER JOIN subsidiaries \
on customers.SUBSIDIARY_ID = subsidiaries.SUBSIDIARY_ID \
LEFT OUTER JOIN CUSTOMER_TYPES \
on customers.CUSTOMER_TYPE_ID = CUSTOMER_TYPES.customer_type_id \
where (ad1.is_default_bill_address='Yes' or ad1.is_default_bill_address is NULL) and (ad2.is_default_ship_address='Yes' or ad2.is_default_ship_address is NULL))temp)
cnvCustInfo.lookup.where.clause.netsuite = where r >= :startKey and r <= :endKey
cnvCustInfo.lookup.sortKey.clause.netsuite = r

cnvCustInfo.subsidiaries.lookup.select.clause.netsuite= select SUBSIDIARY_ID, NAME
cnvCustInfo.subsidiaries.lookup.from.clause.netsuite= from subsidiaries
cnvCustInfo.subsidiaries.lookup.sort.clause.netsuite= SUBSIDIARY_ID

cnvCustInfo.category.lookup.select.clause.netsuite=select customer_type_id, name
cnvCustInfo.category.lookup.from.clause.netsuite= from CUSTOMER_TYPES
cnvCustInfo.category.lookup.sort.clause.netsuite= customer_type_id

insert.clause.cnvcustinfo.netsuite = INSERT INTO pos_cnvcustinfo_lookup (sho_customer_id, shc_customer_identifier, customer_type, \
customer_first_name, customer_middle_name, customer_last_name, company_name, category_name, category_internal_id, comments, email, phone, subsidiary_name, subsidiary_internal_id, \
web_address, shipping_addr_line1, shipping_addr_line2, shipping_city, shipping_state, shipping_zip, default_shipping_flag, billing_addr_line1, billing_addr_line2, billing_city, billing_state, billing_zip, default_billing_flag, source, correlationid) \
values (:customerId, :shcCustomerIdentifier, :customerType, :firstName, :middleName, :lastName, :companyName, :categoryName, :categoryId, :comments, :email, :phone, :subsidaryName, \
:subsidaryId, :url, :shipAddrLine1, :shipAddrLine2, :shipCity, :shipState, :shipZip, :isDefaultShipAddress, :billAddrLine1, :billAddrLine2, :billCity, :billState, :billZip, :isDefaultBillAddress, :source, :correlationid)
insert.clause.cnvCustInfo.subsidiaries= INSERT INTO pos_cnvcustinfo_subsidiaries_lookup(subsidiary_name, subsidiary_internal_id, correlationid) values (:subsidiaryName, :subsidiaryInternalId, :correlationid)  
insert.clause.cnvCustInfo.category= INSERT INTO pos_cnvcustinfo_category_lookup(category_name,category_internal_id,correlationid) values (:categoryName,:categoryInternalId,:correlationid)

cnvCustInfo.enriched.select.clause.upload.ns=Select * from (SELECT @rownum:=@rownum + 1 as r, t.* 
cnvCustInfo.enrichedUpdate.from.clause.upload.ns=FROM ( SELECT * FROM pos_cnvcustinfo_enrich where operation_type in('U')) t, (SELECT @rownum := 0) r)temp
cnvCustInfo.enriched.where.clause.upload.ns=where correlation_id =:correlationId AND r >= :startKey AND r <= :endKey
cnvCustInfo.enriched.sortKey.clause.upload.ns=r
cnvCustInfo.enrichedCreate.from.clause.upload.ns=FROM ( SELECT * FROM pos_cnvcustinfo_enrich where operation_type in('C')) t, (SELECT @rownum := 0) r)temp
cnvCustInfo.enriched.update.clause=update pos_cnvcustinfo_enrich set updated_in_netsuite = :updatedInNetsuite where shc_customer_identifier = :shcCustomerIndentifier and sho_customer_id = :shoCustomerId

cnvCustInfo.insert.pos_cnvcustinfo_dataload= INSERT INTO pos_cnvcustinfo_dataload (sho_customer_id, shc_customer_identifier, customer_type, customer_first_name, customer_middle_name, customer_last_name, \
company_name, category_name, comments, email, phone, subsidiary_name, web_address, shipping_addr_line1, shipping_addr_line2, shipping_city, shipping_state, shipping_zip, \
default_shipping_flag, billing_addr_line1, billing_addr_line2, billing_city, billing_state, billing_zip, default_billing_flag, isvalid, source, correlationid) 	\
values (:customerId, :customerIdentifier, :customerType, :firstName, :middleName, :lastName, :companyName, :categoryId, :comments, :email, :phone, :subsidaryId, :url,	\
:shippingAddrLine1, :shippingAddrLine2, :shippingCity, :shippingState, :shippingZip, :isDefaultShippingAddress, :billAddrLine1, :billAddrLine2, :billCity, :billState, \
:billZip, :isDefaultBillAddress, :isValid, :source, :correlationid)

